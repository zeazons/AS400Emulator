{"ast":null,"code":"import _objectSpread from \"/Users/jutawuth/Git/SSQUARE/Component-AS400-React/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nvar _jsxFileName = \"/Users/jutawuth/Git/SSQUARE/Component-AS400-React/src/components/ScreenMapping/index.jsx\";\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport $ from \"jquery\";\nimport Emulator from \"../Emulator/index\";\nimport EmulatorView from \"../Emulator/EmulatorView\";\nimport { getIndexByRowCol, getHighlightDefault, getSelectionRange, setSelectionRange, getStartSelection, getEndSelection, markAllCheckStringOnScreen } from \"../Emulator/controler\";\nexport class ScreenMapping extends Emulator {\n  constructor(...args) {\n    super(...args);\n\n    this.markStringChackString = (markType, highlight) => {\n      let newMarkList = \"\";\n      const markList = this.state.markList;\n      newMarkList = _objectSpread({}, markList, {\n        [markType.replace(\"-\", \"\")]: highlight\n      });\n      this.setState({\n        markList: newMarkList\n      });\n      this.markAllCheckString(newMarkList);\n    };\n\n    this.clearMarkString = markType => {\n      let newMarkList = \"\";\n      const markList = this.state.markList;\n      const markData = {};\n      newMarkList = _objectSpread({}, markList, {\n        [markType.replace(\"-\", \"\")]: markData\n      });\n      this.setState({\n        markList: newMarkList\n      });\n      this.markAllCheckString(newMarkList);\n    };\n\n    this.onMouseUp = callbackFn => {\n      const id = this.state.id;\n      const elScreen = $(`.${id}.as400-screen`);\n      elScreen.mouseup(event => {\n        // console.log(`| ========== ${event.type} ========== | `);\n        callbackFn(event);\n        this.clearAllMarkChackString(id);\n      });\n    };\n\n    this.onKeyDown = () => {\n      const _this$state = this.state,\n            id = _this$state.id,\n            colSize = _this$state.colSize;\n      const elScreen = $(`.${id}.as400-screen`);\n      elScreen.keydown(event => {\n        // console.log(`| ========== ${event.type} ========== |`);\n        const startSelection = getStartSelection(id, colSize);\n        const endSelection = getEndSelection(id, colSize);\n        const flag = \"field\"; // const flag = 'list';\n\n        if (flag === \"list\") {\n          const selectionStart = getIndexByRowCol(startSelection.row, 0) + 1;\n          const selectionEnd = getIndexByRowCol(endSelection.row, colSize) + 2;\n          setSelectionRange(id, selectionStart, selectionEnd);\n        }\n      });\n    };\n\n    this.onDoubleClick = callbackFn => {\n      const id = this.state.id;\n      const elScreen = $(`.${id}.as400-screen`);\n      elScreen.dblclick(event => {\n        // console.log(`| ========== ${event.type} ========== |`);\n        callbackFn(event);\n      });\n    };\n\n    this.onSelect = () => {\n      const _this$state2 = this.state,\n            id = _this$state2.id,\n            colSize = _this$state2.colSize;\n      const elScreen = $(`.${id}.as400-screen`);\n      elScreen.select(event => {\n        // console.log(`| ========== ${event.type} ========== |`);\n        const start = event.target.selectionStart;\n        const end = event.target.selectionEnd;\n        const startPosition = getStartSelection(id, colSize);\n        this.setState({\n          lastSelection: {\n            text: getSelectionRange(id, start, end),\n            row: startPosition.row,\n            col: startPosition.col\n          }\n        });\n      });\n    };\n\n    this.getHighlight = markType => {\n      return this.state.markList[markType.replace(\"-\", \"\")];\n    };\n\n    this.setHighlight = (markType, highlight) => {\n      this.markStringChackString(markType, highlight);\n    };\n\n    this.clearHighlight = markType => {\n      return this.clearMarkString(markType);\n    };\n\n    this.getHighlightList = () => {\n      return this.state.markList;\n    };\n\n    this.setHighlightList = highlightList => {\n      this.markAllCheckString(highlightList);\n    };\n\n    this.clearHighlightList = () => {\n      this.clearAllMarkChackString(this.props.id);\n    };\n\n    this.getLastSelection = () => {\n      return this.state.lastSelection;\n    };\n  }\n\n  componentDidMount(...args) {\n    super.componentDidMount.apply(this, args);\n    this.markAllCheckString(this.props.highlight);\n    const _this$props = this.props,\n          onDoubleClick = _this$props.onDoubleClick,\n          onMouseUp = _this$props.onMouseUp;\n    this.onSelect();\n    this.onKeyDown();\n    this.onMouseUp(onMouseUp);\n    this.onDoubleClick(onDoubleClick);\n  }\n\n  render() {\n    const _this$props2 = this.props,\n          id = _this$props2.id,\n          readOnly = _this$props2.readOnly;\n    return React.createElement(EmulatorView, {\n      id: id,\n      readOnly: readOnly,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156\n      },\n      __self: this\n    });\n  } // Set default props\n\n\n}\nScreenMapping.defaultProps = {\n  highlight: {}\n};\nScreenMapping.propTypes = {\n  highlightList: PropTypes.object\n};\nexport default ScreenMapping;","map":{"version":3,"sources":["/Users/jutawuth/Git/SSQUARE/Component-AS400-React/src/components/ScreenMapping/index.jsx"],"names":["React","PropTypes","$","Emulator","EmulatorView","getIndexByRowCol","getHighlightDefault","getSelectionRange","setSelectionRange","getStartSelection","getEndSelection","markAllCheckStringOnScreen","ScreenMapping","markStringChackString","markType","highlight","newMarkList","markList","state","replace","setState","markAllCheckString","clearMarkString","markData","onMouseUp","callbackFn","id","elScreen","mouseup","event","clearAllMarkChackString","onKeyDown","colSize","keydown","startSelection","endSelection","flag","selectionStart","row","selectionEnd","onDoubleClick","dblclick","onSelect","select","start","target","end","startPosition","lastSelection","text","col","getHighlight","setHighlight","clearHighlight","getHighlightList","setHighlightList","highlightList","clearHighlightList","props","getLastSelection","componentDidMount","args","apply","render","readOnly","defaultProps","propTypes","object"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport $ from \"jquery\";\n\nimport Emulator from \"../Emulator/index\";\nimport EmulatorView from \"../Emulator/EmulatorView\";\n\nimport {\n  getIndexByRowCol,\n  getHighlightDefault,\n  getSelectionRange,\n  setSelectionRange,\n  getStartSelection,\n  getEndSelection,\n  markAllCheckStringOnScreen\n} from \"../Emulator/controler\";\n\nexport class ScreenMapping extends Emulator {\n  componentDidMount(...args) {\n    super.componentDidMount.apply(this, args);\n\n    this.markAllCheckString(this.props.highlight);\n\n    const { onDoubleClick, onMouseUp } = this.props;\n\n    this.onSelect();\n    this.onKeyDown();\n    this.onMouseUp(onMouseUp);\n    this.onDoubleClick(onDoubleClick);\n  }\n\n  markStringChackString = (markType, highlight) => {\n    let newMarkList = \"\";\n    const markList = this.state.markList;\n\n    newMarkList = {\n      ...markList,\n      [markType.replace(\"-\", \"\")]: highlight\n    };\n\n    this.setState({ markList: newMarkList });\n    this.markAllCheckString(newMarkList);\n  };\n\n  clearMarkString = markType => {\n    let newMarkList = \"\";\n    const markList = this.state.markList;\n    const markData = {};\n\n    newMarkList = {\n      ...markList,\n      [markType.replace(\"-\", \"\")]: markData\n    };\n\n    this.setState({ markList: newMarkList });\n    this.markAllCheckString(newMarkList);\n  };\n\n  onMouseUp = callbackFn => {\n    const { id } = this.state;\n    const elScreen = $(`.${id}.as400-screen`);\n\n    elScreen.mouseup(event => {\n      // console.log(`| ========== ${event.type} ========== | `);\n      callbackFn(event);\n      this.clearAllMarkChackString(id);\n    });\n  };\n\n  onKeyDown = () => {\n    const { id, colSize } = this.state;\n    const elScreen = $(`.${id}.as400-screen`);\n\n    elScreen.keydown(event => {\n      // console.log(`| ========== ${event.type} ========== |`);\n      const startSelection = getStartSelection(id, colSize);\n      const endSelection = getEndSelection(id, colSize);\n\n      const flag = \"field\";\n      // const flag = 'list';\n      if (flag === \"list\") {\n        const selectionStart = getIndexByRowCol(startSelection.row, 0) + 1;\n        const selectionEnd = getIndexByRowCol(endSelection.row, colSize) + 2;\n\n        setSelectionRange(id, selectionStart, selectionEnd);\n      }\n    });\n  };\n\n  onDoubleClick = callbackFn => {\n    const { id } = this.state;\n    const elScreen = $(`.${id}.as400-screen`);\n\n    elScreen.dblclick(event => {\n      // console.log(`| ========== ${event.type} ========== |`);\n\n      callbackFn(event);\n    });\n  };\n\n  onSelect = () => {\n    const { id, colSize } = this.state;\n    const elScreen = $(`.${id}.as400-screen`);\n\n    elScreen.select(event => {\n      // console.log(`| ========== ${event.type} ========== |`);\n      const start = event.target.selectionStart;\n      const end = event.target.selectionEnd;\n      const startPosition = getStartSelection(id, colSize);\n\n      this.setState({\n        lastSelection: {\n          text: getSelectionRange(id, start, end),\n          row: startPosition.row,\n          col: startPosition.col\n        }\n      });\n    });\n  };\n\n  /**\n   * ==================\n   *  provide function\n   * ==================\n   */\n  getHighlight = markType => {\n    return this.state.markList[markType.replace(\"-\", \"\")];\n  };\n\n  setHighlight = (markType, highlight) => {\n    this.markStringChackString(markType, highlight);\n  };\n\n  clearHighlight = markType => {\n    return this.clearMarkString(markType);\n  };\n\n  getHighlightList = () => {\n    return this.state.markList;\n  };\n\n  setHighlightList = highlightList => {\n    this.markAllCheckString(highlightList);\n  };\n\n  clearHighlightList = () => {\n    this.clearAllMarkChackString(this.props.id);\n  };\n\n  getLastSelection = () => {\n    return this.state.lastSelection;\n  };\n\n  render() {\n    const { id, readOnly } = this.props;\n    return <EmulatorView id={id} readOnly={readOnly} />;\n  }\n\n  // Set default props\n  static defaultProps = {\n    highlight: {}\n  };\n}\n\nScreenMapping.propTypes = {\n  highlightList: PropTypes.object\n};\n\nexport default ScreenMapping;\n"]},"metadata":{},"sourceType":"module"}