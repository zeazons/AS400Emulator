{"ast":null,"code":"import _objectSpread from \"/Users/jutawuth/Git/SSQUARE/Component-AS400-React/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nvar _jsxFileName = \"/Users/jutawuth/Git/SSQUARE/Component-AS400-React/src/components/ScreenMapping/index.jsx\";\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport $ from \"jquery\";\nimport Emulator from \"../Emulator/index\";\nimport EmulatorView from \"../Emulator/EmulatorView\";\nimport { getIndexByRowCol, getHighlightDefault, getSelectionRange, setSelectionRange, getStartSelection, getEndSelection, markAllCheckStringOnScreen } from \"../Emulator/controler\";\nexport class ScreenMapping extends Emulator {\n  constructor(props) {\n    super(props);\n\n    this.markAllCheckString = markListData => {\n      const id = this.state.id;\n      this.clearAllMarkChackString(id);\n      this.setState({\n        markList: markListData\n      });\n      markAllCheckStringOnScreen(id, markListData);\n    };\n\n    this.clearAllMarkChackString = elStr => {\n      const _this$state = this.state,\n            rowSize = _this$state.rowSize,\n            colSize = _this$state.colSize;\n      const elHighlight = $(`.${elStr}.as400-highlight`);\n      elHighlight.html(getHighlightDefault(rowSize, colSize));\n      this.setState({\n        markList: {}\n      });\n    };\n\n    this.markStringChackString = (markType, highlight) => {\n      let newMarkList = \"\";\n      const markList = this.state.markList;\n      newMarkList = _objectSpread({}, markList, {\n        [markType.replace(\"-\", \"\")]: highlight\n      });\n      this.setState({\n        markList: newMarkList\n      });\n      this.markAllCheckString(newMarkList);\n    };\n\n    this.clearMarkString = markType => {\n      let newMarkList = \"\";\n      const markList = this.state.markList;\n      const markData = {};\n      newMarkList = _objectSpread({}, markList, {\n        [markType.replace(\"-\", \"\")]: markData\n      });\n      this.setState({\n        markList: newMarkList\n      });\n      this.markAllCheckString(newMarkList);\n    };\n\n    this.onMouseUp = callbackFn => {\n      const id = this.state.id;\n      const elScreen = $(`.${id}.as400-screen`);\n      elScreen.mouseup(event => {\n        // console.log(`| ========== ${event.type} ========== | `);\n        callbackFn(event);\n        this.clearAllMarkChackString(id);\n      });\n    };\n\n    this.onKeyDown = () => {\n      const _this$state2 = this.state,\n            id = _this$state2.id,\n            colSize = _this$state2.colSize;\n      const elScreen = $(`.${id}.as400-screen`);\n      elScreen.keydown(event => {\n        // console.log(`| ========== ${event.type} ========== |`);\n        const startSelection = getStartSelection(id, colSize);\n        const endSelection = getEndSelection(id, colSize);\n        const flag = \"field\"; // const flag = 'list';\n\n        if (flag === \"list\") {\n          const selectionStart = getIndexByRowCol(startSelection.row, 0) + 1;\n          const selectionEnd = getIndexByRowCol(endSelection.row, colSize) + 2;\n          setSelectionRange(id, selectionStart, selectionEnd);\n        }\n      });\n    };\n\n    this.onDoubleClick = callbackFn => {\n      const id = this.state.id;\n      const elScreen = $(`.${id}.as400-screen`);\n      elScreen.dblclick(event => {\n        // console.log(`| ========== ${event.type} ========== |`);\n        callbackFn(event);\n      });\n    };\n\n    this.onSelect = () => {\n      const _this$state3 = this.state,\n            id = _this$state3.id,\n            colSize = _this$state3.colSize;\n      const elScreen = $(`.${id}.as400-screen`);\n      elScreen.select(event => {\n        // console.log(`| ========== ${event.type} ========== |`);\n        const start = event.target.selectionStart;\n        const end = event.target.selectionEnd;\n        const startPosition = getStartSelection(id, colSize);\n        this.setState({\n          lastSelection: {\n            text: getSelectionRange(id, start, end),\n            row: startPosition.row,\n            col: startPosition.col\n          }\n        });\n      });\n    };\n\n    this.getHighlight = markType => {\n      return this.state.markList[markType.replace(\"-\", \"\")];\n    };\n\n    this.setHighlight = (markType, highlight) => {\n      this.markStringChackString(markType, highlight);\n    };\n\n    this.clearHighlight = markType => {\n      return this.clearMarkString(markType);\n    };\n\n    this.getHighlightList = () => {\n      return this.state.markList;\n    };\n\n    this.setHighlightList = highlightList => {\n      this.markAllCheckString(highlightList);\n    };\n\n    this.clearHighlightList = () => {\n      this.clearAllMarkChackString(this.props.id);\n    };\n\n    this.getLastSelection = () => {\n      return this.state.lastSelection;\n    };\n\n    this.state = {\n      id: props.id,\n      markList: props.highlightList,\n      lastSelection: {\n        startIndex: 0,\n        endIndex: 0\n      },\n      rowSize: props.rows,\n      colSize: props.cols\n    };\n  }\n\n  componentDidMount(...args) {\n    super.componentDidMount.apply(this, args);\n    this.markAllCheckString(this.props.highlight);\n    const _this$props = this.props,\n          onDoubleClick = _this$props.onDoubleClick,\n          onMouseUp = _this$props.onMouseUp;\n    this.onSelect();\n    this.onKeyDown();\n    this.onMouseUp(onMouseUp);\n    this.onDoubleClick(onDoubleClick);\n  }\n\n  render() {\n    const _this$props2 = this.props,\n          id = _this$props2.id,\n          readOnly = _this$props2.readOnly;\n    return React.createElement(EmulatorView, {\n      id: id,\n      readOnly: readOnly,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191\n      },\n      __self: this\n    });\n  } // Set default props\n\n\n}\nScreenMapping.defaultProps = {\n  highlight: {}\n};\nScreenMapping.propTypes = {\n  highlightList: PropTypes.object\n};\nexport default ScreenMapping;","map":{"version":3,"sources":["/Users/jutawuth/Git/SSQUARE/Component-AS400-React/src/components/ScreenMapping/index.jsx"],"names":["React","PropTypes","$","Emulator","EmulatorView","getIndexByRowCol","getHighlightDefault","getSelectionRange","setSelectionRange","getStartSelection","getEndSelection","markAllCheckStringOnScreen","ScreenMapping","constructor","props","markAllCheckString","markListData","id","state","clearAllMarkChackString","setState","markList","elStr","rowSize","colSize","elHighlight","html","markStringChackString","markType","highlight","newMarkList","replace","clearMarkString","markData","onMouseUp","callbackFn","elScreen","mouseup","event","onKeyDown","keydown","startSelection","endSelection","flag","selectionStart","row","selectionEnd","onDoubleClick","dblclick","onSelect","select","start","target","end","startPosition","lastSelection","text","col","getHighlight","setHighlight","clearHighlight","getHighlightList","setHighlightList","highlightList","clearHighlightList","getLastSelection","startIndex","endIndex","rows","cols","componentDidMount","args","apply","render","readOnly","defaultProps","propTypes","object"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport $ from \"jquery\";\nimport Emulator from \"../Emulator/index\";\nimport EmulatorView from \"../Emulator/EmulatorView\";\n\nimport {\n  getIndexByRowCol,\n  getHighlightDefault,\n  getSelectionRange,\n  setSelectionRange,\n  getStartSelection,\n  getEndSelection,\n  markAllCheckStringOnScreen\n} from \"../Emulator/controler\";\n\nexport class ScreenMapping extends Emulator {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      id: props.id,\n      markList: props.highlightList,\n      lastSelection: {\n        startIndex: 0,\n        endIndex: 0\n      },\n      rowSize: props.rows,\n      colSize: props.cols\n    };\n  }\n\n  componentDidMount(...args) {\n    super.componentDidMount.apply(this, args);\n\n    this.markAllCheckString(this.props.highlight);\n\n    const { onDoubleClick, onMouseUp } = this.props;\n\n    this.onSelect();\n    this.onKeyDown();\n    this.onMouseUp(onMouseUp);\n    this.onDoubleClick(onDoubleClick);\n  }\n\n  markAllCheckString = markListData => {\n    const { id } = this.state;\n    this.clearAllMarkChackString(id);\n    this.setState({\n      markList: markListData\n    });\n\n    markAllCheckStringOnScreen(id, markListData);\n  };\n\n  clearAllMarkChackString = elStr => {\n    const { rowSize, colSize } = this.state;\n    const elHighlight = $(`.${elStr}.as400-highlight`);\n    elHighlight.html(getHighlightDefault(rowSize, colSize));\n\n    this.setState({\n      markList: {}\n    });\n  };\n\n  markStringChackString = (markType, highlight) => {\n    let newMarkList = \"\";\n    const markList = this.state.markList;\n\n    newMarkList = {\n      ...markList,\n      [markType.replace(\"-\", \"\")]: highlight\n    };\n\n    this.setState({ markList: newMarkList });\n    this.markAllCheckString(newMarkList);\n  };\n\n  clearMarkString = markType => {\n    let newMarkList = \"\";\n    const markList = this.state.markList;\n    const markData = {};\n\n    newMarkList = {\n      ...markList,\n      [markType.replace(\"-\", \"\")]: markData\n    };\n\n    this.setState({ markList: newMarkList });\n    this.markAllCheckString(newMarkList);\n  };\n\n  onMouseUp = callbackFn => {\n    const { id } = this.state;\n    const elScreen = $(`.${id}.as400-screen`);\n\n    elScreen.mouseup(event => {\n      // console.log(`| ========== ${event.type} ========== | `);\n      callbackFn(event);\n      this.clearAllMarkChackString(id);\n    });\n  };\n\n  onKeyDown = () => {\n    const { id, colSize } = this.state;\n    const elScreen = $(`.${id}.as400-screen`);\n\n    elScreen.keydown(event => {\n      // console.log(`| ========== ${event.type} ========== |`);\n      const startSelection = getStartSelection(id, colSize);\n      const endSelection = getEndSelection(id, colSize);\n\n      const flag = \"field\";\n      // const flag = 'list';\n      if (flag === \"list\") {\n        const selectionStart = getIndexByRowCol(startSelection.row, 0) + 1;\n        const selectionEnd = getIndexByRowCol(endSelection.row, colSize) + 2;\n\n        setSelectionRange(id, selectionStart, selectionEnd);\n      }\n    });\n  };\n\n  onDoubleClick = callbackFn => {\n    const { id } = this.state;\n    const elScreen = $(`.${id}.as400-screen`);\n\n    elScreen.dblclick(event => {\n      // console.log(`| ========== ${event.type} ========== |`);\n\n      callbackFn(event);\n    });\n  };\n\n  onSelect = () => {\n    const { id, colSize } = this.state;\n    const elScreen = $(`.${id}.as400-screen`);\n\n    elScreen.select(event => {\n      // console.log(`| ========== ${event.type} ========== |`);\n      const start = event.target.selectionStart;\n      const end = event.target.selectionEnd;\n      const startPosition = getStartSelection(id, colSize);\n\n      this.setState({\n        lastSelection: {\n          text: getSelectionRange(id, start, end),\n          row: startPosition.row,\n          col: startPosition.col\n        }\n      });\n    });\n  };\n\n  /**\n   * ==================\n   *  provide function\n   * ==================\n   */\n  getHighlight = markType => {\n    return this.state.markList[markType.replace(\"-\", \"\")];\n  };\n\n  setHighlight = (markType, highlight) => {\n    this.markStringChackString(markType, highlight);\n  };\n\n  clearHighlight = markType => {\n    return this.clearMarkString(markType);\n  };\n\n  getHighlightList = () => {\n    return this.state.markList;\n  };\n\n  setHighlightList = highlightList => {\n    this.markAllCheckString(highlightList);\n  };\n\n  clearHighlightList = () => {\n    this.clearAllMarkChackString(this.props.id);\n  };\n\n  getLastSelection = () => {\n    return this.state.lastSelection;\n  };\n\n  render() {\n    const { id, readOnly } = this.props;\n    return <EmulatorView id={id} readOnly={readOnly} />;\n  }\n\n  // Set default props\n  static defaultProps = {\n    highlight: {}\n  };\n}\n\nScreenMapping.propTypes = {\n  highlightList: PropTypes.object\n};\n\nexport default ScreenMapping;\n"]},"metadata":{},"sourceType":"module"}