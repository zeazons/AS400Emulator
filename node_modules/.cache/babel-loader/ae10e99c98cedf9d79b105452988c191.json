{"ast":null,"code":"import _objectSpread from \"/Users/jutawuth/Git/SSQUARE/Component-AS400-React/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nvar _jsxFileName = \"/Users/jutawuth/Git/SSQUARE/Component-AS400-React/src/components/ScreenMapping/index.jsx\";\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport $ from \"jquery\";\nimport Emulator from \"../Emulator/index\";\nimport EmulatorView from \"../Emulator/EmulatorView\";\nimport { getIndexByRowCol, getSelectionRange, setSelectionRange, getStartSelection, getEndSelection } from \"../Emulator/controler\";\nexport class ScreenMapping extends Emulator {\n  constructor(...args) {\n    super(...args);\n\n    this.clearMarkString = markType => {\n      let newMarkList = \"\";\n      const markList = this.state.markList;\n      const markData = {};\n      newMarkList = _objectSpread({}, markList, {\n        [markType.replace(\"-\", \"\")]: markData\n      });\n      this.setState({\n        markList: newMarkList\n      });\n      this.markAllCheckString(newMarkList);\n    };\n\n    this.onMouseUp = callbackFn => {\n      const id = this.state.id;\n      const elScreen = $(`.${id}.as400-screen`);\n      elScreen.mouseup(event => {\n        // console.log(`| ========== ${event.type} ========== | `);\n        callbackFn(event);\n        this.clearAllMarkChackString(id);\n      });\n    };\n\n    this.onKeyDown = () => {\n      const _this$state = this.state,\n            id = _this$state.id,\n            colSize = _this$state.colSize;\n      const elScreen = $(`.${id}.as400-screen`);\n      elScreen.keydown(event => {\n        // console.log(`| ========== ${event.type} ========== |`);\n        const startSelection = getStartSelection(id, colSize);\n        const endSelection = getEndSelection(id, colSize);\n        const flag = \"field\"; // const flag = 'list';\n\n        if (flag === \"list\") {\n          const selectionStart = getIndexByRowCol(startSelection.row, 0) + 1;\n          const selectionEnd = getIndexByRowCol(endSelection.row, colSize) + 2;\n          setSelectionRange(id, selectionStart, selectionEnd);\n        }\n      });\n    };\n\n    this.onDoubleClick = callbackFn => {\n      const id = this.state.id;\n      const elScreen = $(`.${id}.as400-screen`);\n      elScreen.dblclick(event => {\n        // console.log(`| ========== ${event.type} ========== |`);\n        callbackFn(event);\n      });\n    };\n\n    this.onSelect = () => {\n      const _this$state2 = this.state,\n            id = _this$state2.id,\n            colSize = _this$state2.colSize;\n      const elScreen = $(`.${id}.as400-screen`);\n      elScreen.select(event => {\n        // console.log(`| ========== ${event.type} ========== |`);\n        const start = event.target.selectionStart;\n        const end = event.target.selectionEnd;\n        const startPosition = getStartSelection(id, colSize);\n        this.setState({\n          lastSelection: {\n            text: getSelectionRange(id, start, end),\n            row: startPosition.row,\n            col: startPosition.col\n          }\n        });\n      });\n    };\n\n    this.getHighlight = markType => {\n      return this.state.markList[markType.replace(\"-\", \"\")];\n    };\n\n    this.setHighlight = (markType, highlight) => {\n      this.markStringChackString(markType, highlight);\n    };\n\n    this.clearHighlight = markType => {\n      return this.clearMarkString(markType);\n    };\n\n    this.getHighlightList = () => {\n      return this.state.markList;\n    };\n\n    this.setHighlightList = highlightList => {\n      this.markAllCheckString(highlightList);\n    };\n\n    this.clearHighlightList = () => {\n      this.clearAllMarkChackString(this.props.id);\n    };\n\n    this.getLastSelection = () => {\n      return this.state.lastSelection;\n    };\n  }\n\n  componentDidMount(...args) {\n    super.componentDidMount.apply(this, args);\n    this.markAllCheckString(this.props.highlight);\n    const _this$props = this.props,\n          onDoubleClick = _this$props.onDoubleClick,\n          onMouseUp = _this$props.onMouseUp;\n    this.onSelect();\n    this.onKeyDown();\n    this.onMouseUp(onMouseUp);\n    this.onDoubleClick(onDoubleClick);\n  }\n\n  render() {\n    const _this$props2 = this.props,\n          id = _this$props2.id,\n          readOnly = _this$props2.readOnly;\n    return React.createElement(EmulatorView, {\n      id: id,\n      readOnly: readOnly,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    });\n  } // Set default props\n\n\n}\nScreenMapping.defaultProps = {\n  highlight: {}\n};\nScreenMapping.propTypes = {\n  highlightList: PropTypes.object\n};\nexport default ScreenMapping;","map":{"version":3,"sources":["/Users/jutawuth/Git/SSQUARE/Component-AS400-React/src/components/ScreenMapping/index.jsx"],"names":["React","PropTypes","$","Emulator","EmulatorView","getIndexByRowCol","getSelectionRange","setSelectionRange","getStartSelection","getEndSelection","ScreenMapping","clearMarkString","markType","newMarkList","markList","state","markData","replace","setState","markAllCheckString","onMouseUp","callbackFn","id","elScreen","mouseup","event","clearAllMarkChackString","onKeyDown","colSize","keydown","startSelection","endSelection","flag","selectionStart","row","selectionEnd","onDoubleClick","dblclick","onSelect","select","start","target","end","startPosition","lastSelection","text","col","getHighlight","setHighlight","highlight","markStringChackString","clearHighlight","getHighlightList","setHighlightList","highlightList","clearHighlightList","props","getLastSelection","componentDidMount","args","apply","render","readOnly","defaultProps","propTypes","object"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport $ from \"jquery\";\n\nimport Emulator from \"../Emulator/index\";\nimport EmulatorView from \"../Emulator/EmulatorView\";\n\nimport {\n  getIndexByRowCol,\n  getSelectionRange,\n  setSelectionRange,\n  getStartSelection,\n  getEndSelection\n} from \"../Emulator/controler\";\n\nexport class ScreenMapping extends Emulator {\n  componentDidMount(...args) {\n    super.componentDidMount.apply(this, args);\n\n    this.markAllCheckString(this.props.highlight);\n\n    const { onDoubleClick, onMouseUp } = this.props;\n\n    this.onSelect();\n    this.onKeyDown();\n    this.onMouseUp(onMouseUp);\n    this.onDoubleClick(onDoubleClick);\n  }\n\n  clearMarkString = markType => {\n    let newMarkList = \"\";\n    const markList = this.state.markList;\n    const markData = {};\n\n    newMarkList = {\n      ...markList,\n      [markType.replace(\"-\", \"\")]: markData\n    };\n\n    this.setState({ markList: newMarkList });\n    this.markAllCheckString(newMarkList);\n  };\n\n  onMouseUp = callbackFn => {\n    const { id } = this.state;\n    const elScreen = $(`.${id}.as400-screen`);\n\n    elScreen.mouseup(event => {\n      // console.log(`| ========== ${event.type} ========== | `);\n      callbackFn(event);\n      this.clearAllMarkChackString(id);\n    });\n  };\n\n  onKeyDown = () => {\n    const { id, colSize } = this.state;\n    const elScreen = $(`.${id}.as400-screen`);\n\n    elScreen.keydown(event => {\n      // console.log(`| ========== ${event.type} ========== |`);\n      const startSelection = getStartSelection(id, colSize);\n      const endSelection = getEndSelection(id, colSize);\n\n      const flag = \"field\";\n      // const flag = 'list';\n      if (flag === \"list\") {\n        const selectionStart = getIndexByRowCol(startSelection.row, 0) + 1;\n        const selectionEnd = getIndexByRowCol(endSelection.row, colSize) + 2;\n\n        setSelectionRange(id, selectionStart, selectionEnd);\n      }\n    });\n  };\n\n  onDoubleClick = callbackFn => {\n    const { id } = this.state;\n    const elScreen = $(`.${id}.as400-screen`);\n\n    elScreen.dblclick(event => {\n      // console.log(`| ========== ${event.type} ========== |`);\n\n      callbackFn(event);\n    });\n  };\n\n  onSelect = () => {\n    const { id, colSize } = this.state;\n    const elScreen = $(`.${id}.as400-screen`);\n\n    elScreen.select(event => {\n      // console.log(`| ========== ${event.type} ========== |`);\n      const start = event.target.selectionStart;\n      const end = event.target.selectionEnd;\n      const startPosition = getStartSelection(id, colSize);\n\n      this.setState({\n        lastSelection: {\n          text: getSelectionRange(id, start, end),\n          row: startPosition.row,\n          col: startPosition.col\n        }\n      });\n    });\n  };\n\n  /**\n   * ==================\n   *  provide function\n   * ==================\n   */\n  getHighlight = markType => {\n    return this.state.markList[markType.replace(\"-\", \"\")];\n  };\n\n  setHighlight = (markType, highlight) => {\n    this.markStringChackString(markType, highlight);\n  };\n\n  clearHighlight = markType => {\n    return this.clearMarkString(markType);\n  };\n\n  getHighlightList = () => {\n    return this.state.markList;\n  };\n\n  setHighlightList = highlightList => {\n    this.markAllCheckString(highlightList);\n  };\n\n  clearHighlightList = () => {\n    this.clearAllMarkChackString(this.props.id);\n  };\n\n  getLastSelection = () => {\n    return this.state.lastSelection;\n  };\n\n  render() {\n    const { id, readOnly } = this.props;\n    return <EmulatorView id={id} readOnly={readOnly} />;\n  }\n\n  // Set default props\n  static defaultProps = {\n    highlight: {}\n  };\n}\n\nScreenMapping.propTypes = {\n  highlightList: PropTypes.object\n};\n\nexport default ScreenMapping;\n"]},"metadata":{},"sourceType":"module"}