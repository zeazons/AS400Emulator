{"ast":null,"code":"var _jsxFileName = \"/Users/jutawuth/git/emulator/src/components/Emulator/index.jsx\";\nimport React, { Component } from \"react\";\nimport \"./css/style.css\";\nexport const EmulatorView = props => {\n  const id = props.id,\n        readOnly = props.readOnly;\n  return React.createElement(\"div\", {\n    className: \"as400-container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 8\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"screen\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 9\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: `${id} as400-highlight`,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 10\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: `${id} as400-style`,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 11\n    },\n    __self: this\n  }), React.createElement(\"textarea\", {\n    readOnly: readOnly ? readOnly : false,\n    className: `${id} as400-screen`,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12\n    },\n    __self: this\n  }), React.createElement(\"textarea\", {\n    readOnly: readOnly ? readOnly : false,\n    className: `${id} as400-screen-temp`,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16\n    },\n    __self: this\n  })));\n};\n\nclass Emulator extends Component {\n  componentDidMount() {\n    const _this$props = this.props,\n          id = _this$props.id,\n          data = _this$props.data;\n    const _data$screen = data.screen,\n          rows = _data$screen.rows,\n          cols = _data$screen.cols;\n    const _data$Text = data.Text,\n          text = _data$Text.Text,\n          style = _data$Text.Style,\n          cursor = _data$Text.Cursor;\n    this.initScreen(id, rows, cols);\n    this.setAs400Screen(id, text);\n    this.setAs400Style(id, text, style);\n    this.setAS400Cursor(id, cursor);\n  }\n\n  render() {\n    const _this$props2 = this.props,\n          id = _this$props2.id,\n          data = _this$props2.data;\n    return React.createElement(EmulatorView, {\n      id: id,\n      data: data,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39\n      },\n      __self: this\n    });\n  }\n\n}\n\nexport default Emulator;","map":{"version":3,"sources":["/Users/jutawuth/git/emulator/src/components/Emulator/index.jsx"],"names":["React","Component","EmulatorView","props","id","readOnly","Emulator","componentDidMount","data","screen","rows","cols","Text","text","style","Style","cursor","Cursor","initScreen","setAs400Screen","setAs400Style","setAS400Cursor","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AAEA,OAAO,iBAAP;AAEA,OAAO,MAAMC,YAAY,GAAGC,KAAK,IAAI;AAAA,QAC3BC,EAD2B,GACVD,KADU,CAC3BC,EAD2B;AAAA,QACvBC,QADuB,GACVF,KADU,CACvBE,QADuB;AAEnC,SACE;AAAK,IAAA,SAAS,EAAC,iBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAK,IAAA,SAAS,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAK,IAAA,SAAS,EAAG,GAAED,EAAG,kBAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE;AAAK,IAAA,SAAS,EAAG,GAAEA,EAAG,cAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,EAGE;AACE,IAAA,QAAQ,EAAEC,QAAQ,GAAGA,QAAH,GAAc,KADlC;AAEE,IAAA,SAAS,EAAG,GAAED,EAAG,eAFnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHF,EAOE;AACE,IAAA,QAAQ,EAAEC,QAAQ,GAAGA,QAAH,GAAc,KADlC;AAEE,IAAA,SAAS,EAAG,GAAED,EAAG,oBAFnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAPF,CADF,CADF;AAgBD,CAlBM;;AAoBP,MAAME,QAAN,SAAuBL,SAAvB,CAAiC;AAC/BM,EAAAA,iBAAiB,GAAG;AAAA,wBACG,KAAKJ,KADR;AAAA,UACVC,EADU,eACVA,EADU;AAAA,UACNI,IADM,eACNA,IADM;AAAA,yBAEKA,IAAI,CAACC,MAFV;AAAA,UAEVC,IAFU,gBAEVA,IAFU;AAAA,UAEJC,IAFI,gBAEJA,IAFI;AAAA,uBAGmCH,IAAI,CAACI,IAHxC;AAAA,UAGJC,IAHI,cAGVD,IAHU;AAAA,UAGSE,KAHT,cAGEC,KAHF;AAAA,UAGwBC,MAHxB,cAGgBC,MAHhB;AAKlB,SAAKC,UAAL,CAAgBd,EAAhB,EAAoBM,IAApB,EAA0BC,IAA1B;AACA,SAAKQ,cAAL,CAAoBf,EAApB,EAAwBS,IAAxB;AACA,SAAKO,aAAL,CAAmBhB,EAAnB,EAAuBS,IAAvB,EAA6BC,KAA7B;AACA,SAAKO,cAAL,CAAoBjB,EAApB,EAAwBY,MAAxB;AACD;;AAEDM,EAAAA,MAAM,GAAG;AAAA,yBACc,KAAKnB,KADnB;AAAA,UACCC,EADD,gBACCA,EADD;AAAA,UACKI,IADL,gBACKA,IADL;AAEP,WAAO,oBAAC,YAAD;AAAc,MAAA,EAAE,EAAEJ,EAAlB;AAAsB,MAAA,IAAI,EAAEI,IAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACD;;AAf8B;;AAiBjC,eAAeF,QAAf","sourcesContent":["import React, { Component } from \"react\";\n\nimport \"./css/style.css\";\n\nexport const EmulatorView = props => {\n  const { id, readOnly } = props;\n  return (\n    <div className=\"as400-container\">\n      <div className=\"screen\">\n        <div className={`${id} as400-highlight`}></div>\n        <div className={`${id} as400-style`}></div>\n        <textarea\n          readOnly={readOnly ? readOnly : false}\n          className={`${id} as400-screen`}\n        ></textarea>\n        <textarea\n          readOnly={readOnly ? readOnly : false}\n          className={`${id} as400-screen-temp`}\n        ></textarea>\n      </div>\n    </div>\n  );\n};\n\nclass Emulator extends Component {\n  componentDidMount() {\n    const { id, data } = this.props;\n    const { rows, cols } = data.screen;\n    const { Text: text, Style: style, Cursor: cursor } = data.Text;\n\n    this.initScreen(id, rows, cols);\n    this.setAs400Screen(id, text);\n    this.setAs400Style(id, text, style);\n    this.setAS400Cursor(id, cursor);\n  }\n\n  render() {\n    const { id, data } = this.props;\n    return <EmulatorView id={id} data={data} />;\n  }\n}\nexport default Emulator;\n"]},"metadata":{},"sourceType":"module"}