{"ast":null,"code":"import _objectSpread from \"/Users/jutawuth/Git/SSQUARE/Component-AS400-React/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nvar _jsxFileName = \"/Users/jutawuth/Git/SSQUARE/Component-AS400-React/src/components/FieldsMapping/index.jsx\";\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport $ from \"jquery\";\nimport _ from \"lodash\";\nimport Emulator from \"../Emulator/index\";\nimport EmulatorView from \"../Emulator/EmulatorView\";\nimport { getIndexByRowCol, getHighlightDefault, getSelectionRange, getStartSelection } from \"../Emulator/controler\";\nconst MARK_1 = \"mark-1\";\nexport class FieldsMapping extends Emulator {\n  constructor(props) {\n    super(props);\n\n    this.markAllCheckString = markListData => {\n      this.clearAllMarkChackString(this.state.id);\n      this.setState({\n        markList: markListData\n      });\n      markAllCheckStringOnScreen();\n    };\n\n    this.clearAllMarkChackString = elStr => {\n      const _this$state = this.state,\n            rowSize = _this$state.rowSize,\n            colSize = _this$state.colSize;\n      const elHighlight = $(`.${elStr}.as400-highlight`);\n      elHighlight.html(getHighlightDefault(rowSize, colSize));\n      this.setState({\n        markList: {}\n      });\n    };\n\n    this.markStringChackString = (markType, highlight) => {\n      let newMarkList = \"\";\n      const markList = this.state.markList;\n      newMarkList = _objectSpread({}, markList, {\n        [markType.replace(\"-\", \"\")]: highlight\n      });\n      this.setState({\n        markList: newMarkList\n      });\n      this.markAllCheckString(newMarkList);\n    };\n\n    this.clearMarkString = markType => {\n      let newMarkList = \"\";\n      const markList = this.state.markList;\n      const markData = {};\n      newMarkList = _objectSpread({}, markList, {\n        [markType.replace(\"-\", \"\")]: markData\n      });\n      this.setState({\n        markList: newMarkList\n      });\n      this.markAllCheckString(newMarkList);\n    };\n\n    this.onMouseUp = callbackFn => {\n      const id = this.state.id;\n      const elScreen = $(`.${id}.as400-screen`);\n      elScreen.mouseup(event => {\n        // console.log(`| ========== ${event.type} ========== | `);\n        callbackFn(event);\n        this.clearAllMarkChackString(id);\n      });\n    };\n\n    this.onDoubleClick = callbackFn => {\n      const id = this.state.id;\n      const elScreen = $(`.${id}.as400-screen`);\n      elScreen.dblclick(event => {\n        // console.log(`| ========== ${event.type} ========== |`);\n        callbackFn(event);\n      });\n    };\n\n    this.onSelect = () => {\n      const _this$state2 = this.state,\n            id = _this$state2.id,\n            colSize = _this$state2.colSize;\n      const elScreen = $(`.${id}.as400-screen`);\n      elScreen.select(event => {\n        // console.log(`| ========== ${event.type} ========== |`);\n        const start = event.target.selectionStart;\n        const end = event.target.selectionEnd;\n        const startPosition = getStartSelection(id, colSize);\n        const data = {\n          text: getSelectionRange(id, start, end),\n          row: startPosition.row,\n          col: startPosition.col\n        };\n        this.setState({\n          lastSelection: {\n            text: getSelectionRange(id, start, end),\n            row: startPosition.row,\n            col: startPosition.col\n          }\n        });\n        this.markStringChackString(MARK_1, data);\n      });\n    };\n\n    this.getFieldHighlight = () => {\n      const markType = MARK_1;\n      return this.state.markList[markType.replace(\"-\", \"\")];\n    };\n\n    this.setFieldHighlight = highlight => {\n      const markType = MARK_1;\n      console.log(\"highlight: \", highlight);\n      this.markStringChackString(markType, highlight);\n    };\n\n    this.clearFieldHighlight = () => {\n      const markType = MARK_1;\n      return this.clearMarkString(markType);\n    };\n\n    this.getLastSelection = () => {\n      return this.state.lastSelection;\n    };\n\n    this.state = {\n      id: props.id,\n      markList: props.highlightList,\n      lastSelection: {\n        startIndex: 0,\n        endIndex: 0\n      },\n      rowSize: props.rows,\n      colSize: props.cols\n    };\n  }\n\n  componentDidMount(...args) {\n    super.componentDidMount.apply(this, args);\n    this.markAllCheckString(this.props.highlight);\n    const _this$props = this.props,\n          onDoubleClick = _this$props.onDoubleClick,\n          onMouseUp = _this$props.onMouseUp;\n    this.onSelect();\n    this.onMouseUp(onMouseUp);\n    this.onDoubleClick(onDoubleClick);\n  }\n\n  render() {\n    const id = this.props.id;\n    return React.createElement(EmulatorView, {\n      id: id,\n      readOnly: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183\n      },\n      __self: this\n    });\n  } // Set default props\n\n\n}\nFieldsMapping.defaultProps = {\n  highlight: {}\n};\nFieldsMapping.propTypes = {\n  highlightList: PropTypes.object\n};\nexport default FieldsMapping;","map":{"version":3,"sources":["/Users/jutawuth/Git/SSQUARE/Component-AS400-React/src/components/FieldsMapping/index.jsx"],"names":["React","PropTypes","$","_","Emulator","EmulatorView","getIndexByRowCol","getHighlightDefault","getSelectionRange","getStartSelection","MARK_1","FieldsMapping","constructor","props","markAllCheckString","markListData","clearAllMarkChackString","state","id","setState","markList","markAllCheckStringOnScreen","elStr","rowSize","colSize","elHighlight","html","markStringChackString","markType","highlight","newMarkList","replace","clearMarkString","markData","onMouseUp","callbackFn","elScreen","mouseup","event","onDoubleClick","dblclick","onSelect","select","start","target","selectionStart","end","selectionEnd","startPosition","data","text","row","col","lastSelection","getFieldHighlight","setFieldHighlight","console","log","clearFieldHighlight","getLastSelection","highlightList","startIndex","endIndex","rows","cols","componentDidMount","args","apply","render","defaultProps","propTypes","object"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport $ from \"jquery\";\nimport _ from \"lodash\";\n\nimport Emulator from \"../Emulator/index\";\nimport EmulatorView from \"../Emulator/EmulatorView\";\n\nimport {\n  getIndexByRowCol,\n  getHighlightDefault,\n  getSelectionRange,\n  getStartSelection\n} from \"../Emulator/controler\";\n\nconst MARK_1 = \"mark-1\";\n\nexport class FieldsMapping extends Emulator {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      id: props.id,\n      markList: props.highlightList,\n      lastSelection: {\n        startIndex: 0,\n        endIndex: 0\n      },\n      rowSize: props.rows,\n      colSize: props.cols\n    };\n  }\n\n  componentDidMount(...args) {\n    super.componentDidMount.apply(this, args);\n\n    this.markAllCheckString(this.props.highlight);\n\n    const { onDoubleClick, onMouseUp } = this.props;\n\n    this.onSelect();\n    this.onMouseUp(onMouseUp);\n    this.onDoubleClick(onDoubleClick);\n  }\n\n  markAllCheckString = markListData => {\n    this.clearAllMarkChackString(this.state.id);\n    this.setState({\n      markList: markListData\n    });\n\n    markAllCheckStringOnScreen();\n  };\n\n  clearAllMarkChackString = elStr => {\n    const { rowSize, colSize } = this.state;\n    const elHighlight = $(`.${elStr}.as400-highlight`);\n    elHighlight.html(getHighlightDefault(rowSize, colSize));\n\n    this.setState({\n      markList: {}\n    });\n  };\n\n  markStringChackString = (markType, highlight) => {\n    let newMarkList = \"\";\n    const markList = this.state.markList;\n\n    newMarkList = {\n      ...markList,\n      [markType.replace(\"-\", \"\")]: highlight\n    };\n\n    this.setState({ markList: newMarkList });\n    this.markAllCheckString(newMarkList);\n  };\n\n  clearMarkString = markType => {\n    let newMarkList = \"\";\n    const markList = this.state.markList;\n    const markData = {};\n\n    newMarkList = {\n      ...markList,\n      [markType.replace(\"-\", \"\")]: markData\n    };\n\n    this.setState({ markList: newMarkList });\n    this.markAllCheckString(newMarkList);\n  };\n\n  onMouseUp = callbackFn => {\n    const { id } = this.state;\n    const elScreen = $(`.${id}.as400-screen`);\n\n    elScreen.mouseup(event => {\n      // console.log(`| ========== ${event.type} ========== | `);\n      callbackFn(event);\n      this.clearAllMarkChackString(id);\n    });\n  };\n\n  onDoubleClick = callbackFn => {\n    const { id } = this.state;\n    const elScreen = $(`.${id}.as400-screen`);\n\n    elScreen.dblclick(event => {\n      // console.log(`| ========== ${event.type} ========== |`);\n\n      callbackFn(event);\n    });\n  };\n\n  onSelect = () => {\n    const { id, colSize } = this.state;\n    const elScreen = $(`.${id}.as400-screen`);\n\n    elScreen.select(event => {\n      // console.log(`| ========== ${event.type} ========== |`);\n      const start = event.target.selectionStart;\n      const end = event.target.selectionEnd;\n      const startPosition = getStartSelection(id, colSize);\n\n      const data = {\n        text: getSelectionRange(id, start, end),\n        row: startPosition.row,\n        col: startPosition.col\n      };\n\n      this.setState({\n        lastSelection: {\n          text: getSelectionRange(id, start, end),\n          row: startPosition.row,\n          col: startPosition.col\n        }\n      });\n\n      this.markStringChackString(MARK_1, data);\n    });\n  };\n\n  /**\n   * ==================\n   *  provide function\n   * ==================\n   */\n  getFieldHighlight = () => {\n    const markType = MARK_1;\n    return this.state.markList[markType.replace(\"-\", \"\")];\n  };\n\n  setFieldHighlight = highlight => {\n    const markType = MARK_1;\n    console.log(\"highlight: \", highlight);\n\n    this.markStringChackString(markType, highlight);\n  };\n\n  clearFieldHighlight = () => {\n    const markType = MARK_1;\n    return this.clearMarkString(markType);\n  };\n\n  // getFieldHighlightList = () => {\n  //   return this.state.markList;\n  // };\n\n  // setFieldHighlightList = highlightList => {\n  //   this.markAllCheckString(highlightList);\n  // };\n\n  // clearFieldHighlightList = () => {\n  //   this.clearAllMarkChackString(this.props.id);\n  // };\n\n  getLastSelection = () => {\n    return this.state.lastSelection;\n  };\n\n  render() {\n    const { id } = this.props;\n    return <EmulatorView id={id} readOnly />;\n  }\n\n  // Set default props\n  static defaultProps = {\n    highlight: {}\n  };\n}\n\nFieldsMapping.propTypes = {\n  highlightList: PropTypes.object\n};\n\nexport default FieldsMapping;\n"]},"metadata":{},"sourceType":"module"}