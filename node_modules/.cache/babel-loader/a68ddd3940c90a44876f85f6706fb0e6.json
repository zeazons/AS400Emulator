{"ast":null,"code":"var _jsxFileName = \"/Users/jutawuth/Git/SSQUARE/Component-AS400-React/src/components/ScreenMapping/index.jsx\";\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport $ from \"jquery\";\nimport Emulator from \"../Emulator/index\";\nimport EmulatorView from \"../Emulator/EmulatorView\";\nimport { getIndexByRowCol, getSelectionRange, setSelectionRange, getStartSelection, getEndSelection } from \"../Emulator/controler\";\nexport class ScreenMapping extends Emulator {\n  constructor(...args) {\n    super(...args);\n\n    this.onMouseUp = callbackFn => {\n      const id = this.state.id;\n      const elScreen = $(`.${id}.as400-screen`);\n      elScreen.mouseup(event => {\n        // console.log(`| ========== ${event.type} ========== | `);\n        callbackFn(event);\n        this.clearAllMarkChackString(id);\n      });\n    };\n\n    this.onKeyDown = () => {\n      const _this$state = this.state,\n            id = _this$state.id,\n            colSize = _this$state.colSize;\n      const elScreen = $(`.${id}.as400-screen`);\n      elScreen.keydown(event => {\n        // console.log(`| ========== ${event.type} ========== |`);\n        const startSelection = getStartSelection(id, colSize);\n        const endSelection = getEndSelection(id, colSize);\n        const flag = \"field\"; // const flag = 'list';\n\n        if (flag === \"list\") {\n          const selectionStart = getIndexByRowCol(startSelection.row, 0) + 1;\n          const selectionEnd = getIndexByRowCol(endSelection.row, colSize) + 2;\n          setSelectionRange(id, selectionStart, selectionEnd);\n        }\n      });\n    };\n\n    this.onDoubleClick = callbackFn => {\n      const id = this.state.id;\n      const elScreen = $(`.${id}.as400-screen`);\n      elScreen.dblclick(event => {\n        // console.log(`| ========== ${event.type} ========== |`);\n        callbackFn(event);\n      });\n    };\n\n    this.onSelect = () => {\n      const _this$state2 = this.state,\n            id = _this$state2.id,\n            colSize = _this$state2.colSize;\n      const elScreen = $(`.${id}.as400-screen`);\n      elScreen.select(event => {\n        // console.log(`| ========== ${event.type} ========== |`);\n        const start = event.target.selectionStart;\n        const end = event.target.selectionEnd;\n        const startPosition = getStartSelection(id, colSize);\n        this.setState({\n          lastSelection: {\n            text: getSelectionRange(id, start, end),\n            row: startPosition.row,\n            col: startPosition.col\n          }\n        });\n      });\n    };\n\n    this.getHighlight = markType => {\n      return this.state.markList[markType.replace(\"-\", \"\")];\n    };\n\n    this.setHighlight = (markType, highlight) => {\n      this.markStringChackString(markType, highlight);\n    };\n\n    this.clearHighlight = markType => {\n      return this.clearMarkString(markType);\n    };\n\n    this.getHighlightList = () => {\n      return this.state.markList;\n    };\n\n    this.setHighlightList = highlightList => {\n      this.markAllCheckString(highlightList);\n    };\n\n    this.clearHighlightList = () => {\n      this.clearAllMarkChackString(this.props.id);\n    };\n\n    this.getLastSelection = () => {\n      return this.state.lastSelection;\n    };\n  }\n\n  componentDidMount(...args) {\n    super.componentDidMount.apply(this, args);\n    this.markAllCheckString(this.props.highlight);\n    const _this$props = this.props,\n          onDoubleClick = _this$props.onDoubleClick,\n          onMouseUp = _this$props.onMouseUp;\n    this.onSelect();\n    this.onKeyDown();\n    this.onMouseUp(onMouseUp);\n    this.onDoubleClick(onDoubleClick);\n  }\n\n  render() {\n    const _this$props2 = this.props,\n          id = _this$props2.id,\n          readOnly = _this$props2.readOnly;\n    return React.createElement(EmulatorView, {\n      id: id,\n      readOnly: readOnly,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    });\n  } // Set default props\n\n\n}\nScreenMapping.defaultProps = {\n  highlight: {}\n};\nScreenMapping.propTypes = {\n  highlightList: PropTypes.object\n};\nexport default ScreenMapping;","map":{"version":3,"sources":["/Users/jutawuth/Git/SSQUARE/Component-AS400-React/src/components/ScreenMapping/index.jsx"],"names":["React","PropTypes","$","Emulator","EmulatorView","getIndexByRowCol","getSelectionRange","setSelectionRange","getStartSelection","getEndSelection","ScreenMapping","onMouseUp","callbackFn","id","state","elScreen","mouseup","event","clearAllMarkChackString","onKeyDown","colSize","keydown","startSelection","endSelection","flag","selectionStart","row","selectionEnd","onDoubleClick","dblclick","onSelect","select","start","target","end","startPosition","setState","lastSelection","text","col","getHighlight","markType","markList","replace","setHighlight","highlight","markStringChackString","clearHighlight","clearMarkString","getHighlightList","setHighlightList","highlightList","markAllCheckString","clearHighlightList","props","getLastSelection","componentDidMount","args","apply","render","readOnly","defaultProps","propTypes","object"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport $ from \"jquery\";\n\nimport Emulator from \"../Emulator/index\";\nimport EmulatorView from \"../Emulator/EmulatorView\";\n\nimport {\n    getIndexByRowCol,\n    getSelectionRange,\n    setSelectionRange,\n    getStartSelection,\n    getEndSelection\n} from \"../Emulator/controler\";\n\nexport class ScreenMapping extends Emulator {\n    componentDidMount(...args) {\n        super.componentDidMount.apply(this, args);\n\n        this.markAllCheckString(this.props.highlight);\n\n        const { onDoubleClick, onMouseUp } = this.props;\n\n        this.onSelect();\n        this.onKeyDown();\n        this.onMouseUp(onMouseUp);\n        this.onDoubleClick(onDoubleClick);\n    }\n\n    onMouseUp = callbackFn => {\n        const { id } = this.state;\n        const elScreen = $(`.${id}.as400-screen`);\n\n        elScreen.mouseup(event => {\n            // console.log(`| ========== ${event.type} ========== | `);\n            callbackFn(event);\n            this.clearAllMarkChackString(id);\n        });\n    };\n\n    onKeyDown = () => {\n        const { id, colSize } = this.state;\n        const elScreen = $(`.${id}.as400-screen`);\n\n        elScreen.keydown(event => {\n            // console.log(`| ========== ${event.type} ========== |`);\n            const startSelection = getStartSelection(id, colSize);\n            const endSelection = getEndSelection(id, colSize);\n\n            const flag = \"field\";\n            // const flag = 'list';\n            if (flag === \"list\") {\n                const selectionStart =\n                    getIndexByRowCol(startSelection.row, 0) + 1;\n                const selectionEnd =\n                    getIndexByRowCol(endSelection.row, colSize) + 2;\n\n                setSelectionRange(id, selectionStart, selectionEnd);\n            }\n        });\n    };\n\n    onDoubleClick = callbackFn => {\n        const { id } = this.state;\n        const elScreen = $(`.${id}.as400-screen`);\n\n        elScreen.dblclick(event => {\n            // console.log(`| ========== ${event.type} ========== |`);\n\n            callbackFn(event);\n        });\n    };\n\n    onSelect = () => {\n        const { id, colSize } = this.state;\n        const elScreen = $(`.${id}.as400-screen`);\n\n        elScreen.select(event => {\n            // console.log(`| ========== ${event.type} ========== |`);\n            const start = event.target.selectionStart;\n            const end = event.target.selectionEnd;\n            const startPosition = getStartSelection(id, colSize);\n\n            this.setState({\n                lastSelection: {\n                    text: getSelectionRange(id, start, end),\n                    row: startPosition.row,\n                    col: startPosition.col\n                }\n            });\n        });\n    };\n\n    /**\n     * ==================\n     *  provide function\n     * ==================\n     */\n    getHighlight = markType => {\n        return this.state.markList[markType.replace(\"-\", \"\")];\n    };\n\n    setHighlight = (markType, highlight) => {\n        this.markStringChackString(markType, highlight);\n    };\n\n    clearHighlight = markType => {\n        return this.clearMarkString(markType);\n    };\n\n    getHighlightList = () => {\n        return this.state.markList;\n    };\n\n    setHighlightList = highlightList => {\n        this.markAllCheckString(highlightList);\n    };\n\n    clearHighlightList = () => {\n        this.clearAllMarkChackString(this.props.id);\n    };\n\n    getLastSelection = () => {\n        return this.state.lastSelection;\n    };\n\n    render() {\n        const { id, readOnly } = this.props;\n        return <EmulatorView id={id} readOnly={readOnly} />;\n    }\n\n    // Set default props\n    static defaultProps = {\n        highlight: {}\n    };\n}\n\nScreenMapping.propTypes = {\n    highlightList: PropTypes.object\n};\n\nexport default ScreenMapping;\n"]},"metadata":{},"sourceType":"module"}