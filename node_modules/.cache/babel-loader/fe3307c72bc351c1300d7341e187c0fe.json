{"ast":null,"code":"import _objectSpread from \"/Users/jutawuth/Git/SSQUARE/Component-AS400-React/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nvar _jsxFileName = \"/Users/jutawuth/Git/SSQUARE/Component-AS400-React/src/components/ScreenMapping/index.jsx\";\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport $ from \"jquery\";\nimport _ from \"lodash\";\nimport Emulator from \"../Emulator/index\";\nimport EmulatorView from \"../Emulator/EmulatorView\";\nimport { getIndexByRowCol, getHighlightDefault, getSelectionRange, setSelectionRange, getStartSelection, getEndSelection, markAllCheckString, clearAllMarkChackString } from \"../Emulator/controler\";\nexport class ScreenMapping extends Emulator {\n  constructor(props) {\n    super(props);\n\n    this.markStringChackString = (markType, highlight) => {\n      let newMarkList = \"\";\n      const markList = this.state.markList;\n      newMarkList = _objectSpread({}, markList, {\n        [markType.replace(\"-\", \"\")]: highlight\n      });\n      this.setState({\n        markList: newMarkList\n      });\n      markAllCheckString(newMarkList);\n    };\n\n    this.clearMarkString = markType => {\n      let newMarkList = \"\";\n      const markList = this.state.markList;\n      const markData = {};\n      newMarkList = _objectSpread({}, markList, {\n        [markType.replace(\"-\", \"\")]: markData\n      });\n      this.setState({\n        markList: newMarkList\n      });\n      markAllCheckString(newMarkList);\n    };\n\n    this.onMouseUp = callbackFn => {\n      const id = this.state.id;\n      const elScreen = $(`.${id}.as400-screen`);\n      elScreen.mouseup(event => {\n        // console.log(`| ========== ${event.type} ========== | `);\n        callbackFn(event);\n        this.clearAllMarkChackString(id);\n      });\n    };\n\n    this.onKeyDown = () => {\n      const _this$state = this.state,\n            id = _this$state.id,\n            colSize = _this$state.colSize;\n      const elScreen = $(`.${id}.as400-screen`);\n      elScreen.keydown(event => {\n        // console.log(`| ========== ${event.type} ========== |`);\n        const startSelection = getStartSelection(id, colSize);\n        const endSelection = getEndSelection(id, colSize);\n        const flag = \"field\"; // const flag = 'list';\n\n        if (flag === \"list\") {\n          const selectionStart = getIndexByRowCol(startSelection.row, 0) + 1;\n          const selectionEnd = getIndexByRowCol(endSelection.row, colSize) + 2;\n          setSelectionRange(id, selectionStart, selectionEnd);\n        }\n      });\n    };\n\n    this.onDoubleClick = callbackFn => {\n      const id = this.state.id;\n      const elScreen = $(`.${id}.as400-screen`);\n      elScreen.dblclick(event => {\n        // console.log(`| ========== ${event.type} ========== |`);\n        callbackFn(event);\n      });\n    };\n\n    this.onSelect = () => {\n      const _this$state2 = this.state,\n            id = _this$state2.id,\n            colSize = _this$state2.colSize;\n      const elScreen = $(`.${id}.as400-screen`);\n      elScreen.select(event => {\n        // console.log(`| ========== ${event.type} ========== |`);\n        const start = event.target.selectionStart;\n        const end = event.target.selectionEnd;\n        const startPosition = getStartSelection(id, colSize);\n        this.setState({\n          lastSelection: {\n            text: getSelectionRange(id, start, end),\n            row: startPosition.row,\n            col: startPosition.col\n          }\n        });\n      });\n    };\n\n    this.getHighlight = markType => {\n      return this.state.markList[markType.replace(\"-\", \"\")];\n    };\n\n    this.setHighlight = (markType, highlight) => {\n      this.markStringChackString(markType, highlight);\n    };\n\n    this.clearHighlight = markType => {\n      return this.clearMarkString(markType);\n    };\n\n    this.getHighlightList = () => {\n      return this.state.markList;\n    };\n\n    this.setHighlightList = highlightList => {\n      markAllCheckString(highlightList);\n    };\n\n    this.clearHighlightList = () => {\n      this.clearAllMarkChackString(this.props.id);\n    };\n\n    this.getLastSelection = () => {\n      return this.state.lastSelection;\n    };\n\n    this.state = {\n      id: props.id,\n      markList: props.highlightList,\n      lastSelection: {\n        startIndex: 0,\n        endIndex: 0\n      },\n      rowSize: props.rows,\n      colSize: props.cols\n    };\n  }\n\n  componentDidMount(...args) {\n    super.componentDidMount.apply(this, args);\n    markAllCheckString(this.props.highlight);\n    const _this$props = this.props,\n          onDoubleClick = _this$props.onDoubleClick,\n          onMouseUp = _this$props.onMouseUp;\n    this.onSelect();\n    this.onKeyDown();\n    this.onMouseUp(onMouseUp);\n    this.onDoubleClick(onDoubleClick);\n  }\n\n  render() {\n    const _this$props2 = this.props,\n          id = _this$props2.id,\n          readOnly = _this$props2.readOnly;\n    return React.createElement(EmulatorView, {\n      id: id,\n      readOnly: readOnly,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174\n      },\n      __self: this\n    });\n  } // Set default props\n\n\n}\nScreenMapping.defaultProps = {\n  highlight: {}\n};\nScreenMapping.propTypes = {\n  highlightList: PropTypes.object\n};\nexport default ScreenMapping;","map":{"version":3,"sources":["/Users/jutawuth/Git/SSQUARE/Component-AS400-React/src/components/ScreenMapping/index.jsx"],"names":["React","PropTypes","$","_","Emulator","EmulatorView","getIndexByRowCol","getHighlightDefault","getSelectionRange","setSelectionRange","getStartSelection","getEndSelection","markAllCheckString","clearAllMarkChackString","ScreenMapping","constructor","props","markStringChackString","markType","highlight","newMarkList","markList","state","replace","setState","clearMarkString","markData","onMouseUp","callbackFn","id","elScreen","mouseup","event","onKeyDown","colSize","keydown","startSelection","endSelection","flag","selectionStart","row","selectionEnd","onDoubleClick","dblclick","onSelect","select","start","target","end","startPosition","lastSelection","text","col","getHighlight","setHighlight","clearHighlight","getHighlightList","setHighlightList","highlightList","clearHighlightList","getLastSelection","startIndex","endIndex","rowSize","rows","cols","componentDidMount","args","apply","render","readOnly","defaultProps","propTypes","object"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport $ from \"jquery\";\nimport _ from \"lodash\";\n\nimport Emulator from \"../Emulator/index\";\nimport EmulatorView from \"../Emulator/EmulatorView\";\n\nimport {\n  getIndexByRowCol,\n  getHighlightDefault,\n  getSelectionRange,\n  setSelectionRange,\n  getStartSelection,\n  getEndSelection,\n  markAllCheckString,\n  clearAllMarkChackString\n} from \"../Emulator/controler\";\n\nexport class ScreenMapping extends Emulator {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      id: props.id,\n      markList: props.highlightList,\n      lastSelection: {\n        startIndex: 0,\n        endIndex: 0\n      },\n      rowSize: props.rows,\n      colSize: props.cols\n    };\n  }\n\n  componentDidMount(...args) {\n    super.componentDidMount.apply(this, args);\n\n    markAllCheckString(this.props.highlight);\n\n    const { onDoubleClick, onMouseUp } = this.props;\n\n    this.onSelect();\n    this.onKeyDown();\n    this.onMouseUp(onMouseUp);\n    this.onDoubleClick(onDoubleClick);\n  }\n\n  markStringChackString = (markType, highlight) => {\n    let newMarkList = \"\";\n    const markList = this.state.markList;\n\n    newMarkList = {\n      ...markList,\n      [markType.replace(\"-\", \"\")]: highlight\n    };\n\n    this.setState({ markList: newMarkList });\n    markAllCheckString(newMarkList);\n  };\n\n  clearMarkString = markType => {\n    let newMarkList = \"\";\n    const markList = this.state.markList;\n    const markData = {};\n\n    newMarkList = {\n      ...markList,\n      [markType.replace(\"-\", \"\")]: markData\n    };\n\n    this.setState({ markList: newMarkList });\n    markAllCheckString(newMarkList);\n  };\n\n  onMouseUp = callbackFn => {\n    const { id } = this.state;\n    const elScreen = $(`.${id}.as400-screen`);\n\n    elScreen.mouseup(event => {\n      // console.log(`| ========== ${event.type} ========== | `);\n      callbackFn(event);\n      this.clearAllMarkChackString(id);\n    });\n  };\n\n  onKeyDown = () => {\n    const { id, colSize } = this.state;\n    const elScreen = $(`.${id}.as400-screen`);\n\n    elScreen.keydown(event => {\n      // console.log(`| ========== ${event.type} ========== |`);\n      const startSelection = getStartSelection(id, colSize);\n      const endSelection = getEndSelection(id, colSize);\n\n      const flag = \"field\";\n      // const flag = 'list';\n      if (flag === \"list\") {\n        const selectionStart = getIndexByRowCol(startSelection.row, 0) + 1;\n        const selectionEnd = getIndexByRowCol(endSelection.row, colSize) + 2;\n\n        setSelectionRange(id, selectionStart, selectionEnd);\n      }\n    });\n  };\n\n  onDoubleClick = callbackFn => {\n    const { id } = this.state;\n    const elScreen = $(`.${id}.as400-screen`);\n\n    elScreen.dblclick(event => {\n      // console.log(`| ========== ${event.type} ========== |`);\n\n      callbackFn(event);\n    });\n  };\n\n  onSelect = () => {\n    const { id, colSize } = this.state;\n    const elScreen = $(`.${id}.as400-screen`);\n\n    elScreen.select(event => {\n      // console.log(`| ========== ${event.type} ========== |`);\n      const start = event.target.selectionStart;\n      const end = event.target.selectionEnd;\n      const startPosition = getStartSelection(id, colSize);\n\n      this.setState({\n        lastSelection: {\n          text: getSelectionRange(id, start, end),\n          row: startPosition.row,\n          col: startPosition.col\n        }\n      });\n    });\n  };\n\n  /**\n   * ==================\n   *  provide function\n   * ==================\n   */\n  getHighlight = markType => {\n    return this.state.markList[markType.replace(\"-\", \"\")];\n  };\n\n  setHighlight = (markType, highlight) => {\n    this.markStringChackString(markType, highlight);\n  };\n\n  clearHighlight = markType => {\n    return this.clearMarkString(markType);\n  };\n\n  getHighlightList = () => {\n    return this.state.markList;\n  };\n\n  setHighlightList = highlightList => {\n    markAllCheckString(highlightList);\n  };\n\n  clearHighlightList = () => {\n    this.clearAllMarkChackString(this.props.id);\n  };\n\n  getLastSelection = () => {\n    return this.state.lastSelection;\n  };\n\n  render() {\n    const { id, readOnly } = this.props;\n    return <EmulatorView id={id} readOnly={readOnly} />;\n  }\n\n  // Set default props\n  static defaultProps = {\n    highlight: {}\n  };\n}\n\nScreenMapping.propTypes = {\n  highlightList: PropTypes.object\n};\n\nexport default ScreenMapping;\n"]},"metadata":{},"sourceType":"module"}