{"ast":null,"code":"var _jsxFileName = \"/Users/jutawuth/Git/SSQUARE/Component-AS400-React/src/components/ListMapping/index.jsx\";\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport $ from \"jquery\";\nimport Emulator from \"../Emulator/index\";\nimport EmulatorView from \"../Emulator/EmulatorView\";\nimport { getSelectionRange, getStartSelection } from \"../Emulator/controler\";\nconst MARK_1 = \"mark-1\";\nconst MARK_3 = \"mark-3\";\nexport class ListMapping extends Emulator {\n  constructor(...args) {\n    super(...args);\n\n    this.onMouseUp = callbackFn => {\n      const id = this.state.id;\n      const elScreen = $(`.${id}.as400-screen`);\n      elScreen.mouseup(event => {\n        // console.log(`| ========== ${event.type} ========== | `);\n        callbackFn(event);\n        this.clearAllMarkChackString(id);\n      });\n    };\n\n    this.onDoubleClick = callbackFn => {\n      const id = this.state.id;\n      const elScreen = $(`.${id}.as400-screen`);\n      elScreen.dblclick(event => {\n        // console.log(`| ========== ${event.type} ========== |`);\n        callbackFn(event);\n      });\n    };\n\n    this.onSelect = () => {\n      const _this$state = this.state,\n            id = _this$state.id,\n            colSize = _this$state.colSize;\n      const elScreen = $(`.${id}.as400-screen`);\n      elScreen.select(event => {\n        // console.log(`| ========== ${event.type} ========== |`);\n        const start = event.target.selectionStart;\n        const end = event.target.selectionEnd;\n        const startPosition = getStartSelection(id, colSize);\n        const data = {\n          text: getSelectionRange(id, start, end),\n          row: startPosition.row,\n          col: startPosition.col\n        };\n        this.setState({\n          lastSelection: {\n            text: getSelectionRange(id, start, end),\n            row: startPosition.row,\n            col: startPosition.col\n          }\n        });\n\n        if (data.text.length < colSize) {\n          this.markStringChackString(MARK_3, data);\n        } else if (data.col === 1 && data.text.length >= colSize) {\n          this.markStringChackString(MARK_1, data);\n        }\n      });\n    };\n\n    this.getListHighlight = () => {\n      const markType = MARK_1;\n      return this.state.markList[markType.replace(\"-\", \"\")];\n    };\n\n    this.setListHighlight = highlight => {\n      this.markStringChackString(MARK_1, highlight);\n    };\n\n    this.clearListHighlight = () => {\n      return this.clearMarkString(MARK_1);\n    };\n\n    this.getFieldHighlight = () => {\n      return this.state.markList[MARK_3.replace(\"-\", \"\")];\n    };\n\n    this.setFieldHighlight = highlight => {\n      this.markStringChackString(MARK_3, highlight);\n    };\n\n    this.clearFieldHighlight = () => {\n      return this.clearMarkString(MARK_3);\n    };\n\n    this.getLastSelection = () => {\n      return this.state.lastSelection;\n    };\n  }\n\n  componentDidMount(...args) {\n    super.componentDidMount.apply(this, args);\n    this.markAllCheckString(this.props.highlight);\n    const _this$props = this.props,\n          onDoubleClick = _this$props.onDoubleClick,\n          onMouseUp = _this$props.onMouseUp;\n    this.onSelect();\n    this.onMouseUp(onMouseUp);\n    this.onDoubleClick(onDoubleClick);\n  }\n\n  render() {\n    const id = this.props.id;\n    return React.createElement(EmulatorView, {\n      id: id,\n      readOnly: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    });\n  } // Set default props\n\n\n}\nListMapping.defaultProps = {\n  highlight: {}\n};\nListMapping.propTypes = {\n  highlightList: PropTypes.object,\n  onDoubleClick: PropTypes.func,\n  onMouseUp: PropTypes.func\n};\nexport default ListMapping;","map":{"version":3,"sources":["/Users/jutawuth/Git/SSQUARE/Component-AS400-React/src/components/ListMapping/index.jsx"],"names":["React","PropTypes","$","Emulator","EmulatorView","getSelectionRange","getStartSelection","MARK_1","MARK_3","ListMapping","onMouseUp","callbackFn","id","state","elScreen","mouseup","event","clearAllMarkChackString","onDoubleClick","dblclick","onSelect","colSize","select","start","target","selectionStart","end","selectionEnd","startPosition","data","text","row","col","setState","lastSelection","length","markStringChackString","getListHighlight","markType","markList","replace","setListHighlight","highlight","clearListHighlight","clearMarkString","getFieldHighlight","setFieldHighlight","clearFieldHighlight","getLastSelection","componentDidMount","args","apply","markAllCheckString","props","render","defaultProps","propTypes","highlightList","object","func"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,CAAP,MAAc,QAAd;AAEA,OAAOC,QAAP,MAAqB,mBAArB;AACA,OAAOC,YAAP,MAAyB,0BAAzB;AAEA,SAASC,iBAAT,EAA4BC,iBAA5B,QAAqD,uBAArD;AAEA,MAAMC,MAAM,GAAG,QAAf;AACA,MAAMC,MAAM,GAAG,QAAf;AAEA,OAAO,MAAMC,WAAN,SAA0BN,QAA1B,CAAmC;AAAA;AAAA;;AAAA,SAaxCO,SAbwC,GAa5BC,UAAU,IAAI;AAAA,YAChBC,EADgB,GACT,KAAKC,KADI,CAChBD,EADgB;AAExB,YAAME,QAAQ,GAAGZ,CAAC,CAAE,IAAGU,EAAG,eAAR,CAAlB;AAEAE,MAAAA,QAAQ,CAACC,OAAT,CAAiBC,KAAK,IAAI;AACxB;AACAL,QAAAA,UAAU,CAACK,KAAD,CAAV;AACA,aAAKC,uBAAL,CAA6BL,EAA7B;AACD,OAJD;AAKD,KAtBuC;;AAAA,SAwBxCM,aAxBwC,GAwBxBP,UAAU,IAAI;AAAA,YACpBC,EADoB,GACb,KAAKC,KADQ,CACpBD,EADoB;AAE5B,YAAME,QAAQ,GAAGZ,CAAC,CAAE,IAAGU,EAAG,eAAR,CAAlB;AAEAE,MAAAA,QAAQ,CAACK,QAAT,CAAkBH,KAAK,IAAI;AACzB;AAEAL,QAAAA,UAAU,CAACK,KAAD,CAAV;AACD,OAJD;AAKD,KAjCuC;;AAAA,SAmCxCI,QAnCwC,GAmC7B,MAAM;AAAA,0BACS,KAAKP,KADd;AAAA,YACPD,EADO,eACPA,EADO;AAAA,YACHS,OADG,eACHA,OADG;AAEf,YAAMP,QAAQ,GAAGZ,CAAC,CAAE,IAAGU,EAAG,eAAR,CAAlB;AAEAE,MAAAA,QAAQ,CAACQ,MAAT,CAAgBN,KAAK,IAAI;AACvB;AACA,cAAMO,KAAK,GAAGP,KAAK,CAACQ,MAAN,CAAaC,cAA3B;AACA,cAAMC,GAAG,GAAGV,KAAK,CAACQ,MAAN,CAAaG,YAAzB;AACA,cAAMC,aAAa,GAAGtB,iBAAiB,CAACM,EAAD,EAAKS,OAAL,CAAvC;AAEA,cAAMQ,IAAI,GAAG;AACXC,UAAAA,IAAI,EAAEzB,iBAAiB,CAACO,EAAD,EAAKW,KAAL,EAAYG,GAAZ,CADZ;AAEXK,UAAAA,GAAG,EAAEH,aAAa,CAACG,GAFR;AAGXC,UAAAA,GAAG,EAAEJ,aAAa,CAACI;AAHR,SAAb;AAMA,aAAKC,QAAL,CAAc;AACZC,UAAAA,aAAa,EAAE;AACbJ,YAAAA,IAAI,EAAEzB,iBAAiB,CAACO,EAAD,EAAKW,KAAL,EAAYG,GAAZ,CADV;AAEbK,YAAAA,GAAG,EAAEH,aAAa,CAACG,GAFN;AAGbC,YAAAA,GAAG,EAAEJ,aAAa,CAACI;AAHN;AADH,SAAd;;AAQA,YAAIH,IAAI,CAACC,IAAL,CAAUK,MAAV,GAAmBd,OAAvB,EAAgC;AAC9B,eAAKe,qBAAL,CAA2B5B,MAA3B,EAAmCqB,IAAnC;AACD,SAFD,MAEO,IAAIA,IAAI,CAACG,GAAL,KAAa,CAAb,IAAkBH,IAAI,CAACC,IAAL,CAAUK,MAAV,IAAoBd,OAA1C,EAAmD;AACxD,eAAKe,qBAAL,CAA2B7B,MAA3B,EAAmCsB,IAAnC;AACD;AACF,OAzBD;AA0BD,KAjEuC;;AAAA,SAwExCQ,gBAxEwC,GAwErB,MAAM;AACvB,YAAMC,QAAQ,GAAG/B,MAAjB;AACA,aAAO,KAAKM,KAAL,CAAW0B,QAAX,CAAoBD,QAAQ,CAACE,OAAT,CAAiB,GAAjB,EAAsB,EAAtB,CAApB,CAAP;AACD,KA3EuC;;AAAA,SA6ExCC,gBA7EwC,GA6ErBC,SAAS,IAAI;AAC9B,WAAKN,qBAAL,CAA2B7B,MAA3B,EAAmCmC,SAAnC;AACD,KA/EuC;;AAAA,SAiFxCC,kBAjFwC,GAiFnB,MAAM;AACzB,aAAO,KAAKC,eAAL,CAAqBrC,MAArB,CAAP;AACD,KAnFuC;;AAAA,SAqFxCsC,iBArFwC,GAqFpB,MAAM;AACxB,aAAO,KAAKhC,KAAL,CAAW0B,QAAX,CAAoB/B,MAAM,CAACgC,OAAP,CAAe,GAAf,EAAoB,EAApB,CAApB,CAAP;AACD,KAvFuC;;AAAA,SAyFxCM,iBAzFwC,GAyFpBJ,SAAS,IAAI;AAC/B,WAAKN,qBAAL,CAA2B5B,MAA3B,EAAmCkC,SAAnC;AACD,KA3FuC;;AAAA,SA6FxCK,mBA7FwC,GA6FlB,MAAM;AAC1B,aAAO,KAAKH,eAAL,CAAqBpC,MAArB,CAAP;AACD,KA/FuC;;AAAA,SAiGxCwC,gBAjGwC,GAiGrB,MAAM;AACvB,aAAO,KAAKnC,KAAL,CAAWqB,aAAlB;AACD,KAnGuC;AAAA;;AACxCe,EAAAA,iBAAiB,CAAC,GAAGC,IAAJ,EAAU;AACzB,UAAMD,iBAAN,CAAwBE,KAAxB,CAA8B,IAA9B,EAAoCD,IAApC;AAEA,SAAKE,kBAAL,CAAwB,KAAKC,KAAL,CAAWX,SAAnC;AAHyB,wBAKY,KAAKW,KALjB;AAAA,UAKjBnC,aALiB,eAKjBA,aALiB;AAAA,UAKFR,SALE,eAKFA,SALE;AAOzB,SAAKU,QAAL;AACA,SAAKV,SAAL,CAAeA,SAAf;AACA,SAAKQ,aAAL,CAAmBA,aAAnB;AACD;;AA0FDoC,EAAAA,MAAM,GAAG;AAAA,UACC1C,EADD,GACQ,KAAKyC,KADb,CACCzC,EADD;AAEP,WAAO,oBAAC,YAAD;AAAc,MAAA,EAAE,EAAEA,EAAlB;AAAsB,MAAA,QAAQ,MAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACD,GAxGuC,CA0GxC;;;AA1GwC;AAA7BH,W,CA2GJ8C,Y,GAAe;AACpBb,EAAAA,SAAS,EAAE;AADS,C;AAKxBjC,WAAW,CAAC+C,SAAZ,GAAwB;AACtBC,EAAAA,aAAa,EAAExD,SAAS,CAACyD,MADH;AAEtBxC,EAAAA,aAAa,EAAEjB,SAAS,CAAC0D,IAFH;AAGtBjD,EAAAA,SAAS,EAAET,SAAS,CAAC0D;AAHC,CAAxB;AAMA,eAAelD,WAAf","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport $ from \"jquery\";\n\nimport Emulator from \"../Emulator/index\";\nimport EmulatorView from \"../Emulator/EmulatorView\";\n\nimport { getSelectionRange, getStartSelection } from \"../Emulator/controler\";\n\nconst MARK_1 = \"mark-1\";\nconst MARK_3 = \"mark-3\";\n\nexport class ListMapping extends Emulator {\n  componentDidMount(...args) {\n    super.componentDidMount.apply(this, args);\n\n    this.markAllCheckString(this.props.highlight);\n\n    const { onDoubleClick, onMouseUp } = this.props;\n\n    this.onSelect();\n    this.onMouseUp(onMouseUp);\n    this.onDoubleClick(onDoubleClick);\n  }\n\n  onMouseUp = callbackFn => {\n    const { id } = this.state;\n    const elScreen = $(`.${id}.as400-screen`);\n\n    elScreen.mouseup(event => {\n      // console.log(`| ========== ${event.type} ========== | `);\n      callbackFn(event);\n      this.clearAllMarkChackString(id);\n    });\n  };\n\n  onDoubleClick = callbackFn => {\n    const { id } = this.state;\n    const elScreen = $(`.${id}.as400-screen`);\n\n    elScreen.dblclick(event => {\n      // console.log(`| ========== ${event.type} ========== |`);\n\n      callbackFn(event);\n    });\n  };\n\n  onSelect = () => {\n    const { id, colSize } = this.state;\n    const elScreen = $(`.${id}.as400-screen`);\n\n    elScreen.select(event => {\n      // console.log(`| ========== ${event.type} ========== |`);\n      const start = event.target.selectionStart;\n      const end = event.target.selectionEnd;\n      const startPosition = getStartSelection(id, colSize);\n\n      const data = {\n        text: getSelectionRange(id, start, end),\n        row: startPosition.row,\n        col: startPosition.col\n      };\n\n      this.setState({\n        lastSelection: {\n          text: getSelectionRange(id, start, end),\n          row: startPosition.row,\n          col: startPosition.col\n        }\n      });\n\n      if (data.text.length < colSize) {\n        this.markStringChackString(MARK_3, data);\n      } else if (data.col === 1 && data.text.length >= colSize) {\n        this.markStringChackString(MARK_1, data);\n      }\n    });\n  };\n\n  /**\n   * ==================\n   *  provide function\n   * ==================\n   */\n  getListHighlight = () => {\n    const markType = MARK_1;\n    return this.state.markList[markType.replace(\"-\", \"\")];\n  };\n\n  setListHighlight = highlight => {\n    this.markStringChackString(MARK_1, highlight);\n  };\n\n  clearListHighlight = () => {\n    return this.clearMarkString(MARK_1);\n  };\n\n  getFieldHighlight = () => {\n    return this.state.markList[MARK_3.replace(\"-\", \"\")];\n  };\n\n  setFieldHighlight = highlight => {\n    this.markStringChackString(MARK_3, highlight);\n  };\n\n  clearFieldHighlight = () => {\n    return this.clearMarkString(MARK_3);\n  };\n\n  getLastSelection = () => {\n    return this.state.lastSelection;\n  };\n\n  render() {\n    const { id } = this.props;\n    return <EmulatorView id={id} readOnly />;\n  }\n\n  // Set default props\n  static defaultProps = {\n    highlight: {}\n  };\n}\n\nListMapping.propTypes = {\n  highlightList: PropTypes.object,\n  onDoubleClick: PropTypes.func,\n  onMouseUp: PropTypes.func\n};\n\nexport default ListMapping;\n"]},"metadata":{},"sourceType":"module"}