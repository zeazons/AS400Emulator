{"ast":null,"code":"var _jsxFileName = \"/Users/jutawuth/git/emulator/src/components/Emulator/index.jsx\";\nimport React, { Component } from \"react\";\nimport $ from \"jquery\";\nimport \"../../css/style.css\";\n\nclass Emulator extends Component {\n  constructor(props) {\n    super(props);\n\n    this.getHighlightDefault = (rowSize, colSize) => {\n      let textHighlight = \"\";\n\n      for (let i = 0; i < rowSize; i += 1) {\n        for (let j = 0; j < colSize; j += 1) {\n          textHighlight += \".\";\n        }\n\n        textHighlight += \"\\n\";\n      }\n\n      return textHighlight;\n    };\n\n    this.getIndexByRowCol = (row, colSize) => (row - 1) * 80 + colSize + row - 2;\n\n    this.setSelectionRange = (elStr, selectionStart, selectionEnd) => {\n      const elScreen = $(`.${elStr}.as400-screen`)[0];\n      let start = selectionStart;\n      let end = selectionEnd;\n      start -= 1;\n      end -= 1; // elScreen.focus();\n\n      if (elScreen.setSelectionRange) {\n        elScreen.setSelectionRange(start, end);\n      } else if (elScreen.createTextRange) {\n        const range = elScreen.createTextRange();\n        range.collapse(true);\n        range.moveEnd(\"character\", end);\n        range.moveStart(\"character\", start);\n        range.select();\n      }\n    };\n\n    this.initScreen = (elStr, rowSize, colSize) => {\n      const elScreen = $(`.${elStr}.as400-screen`);\n      elScreen.attr(\"rows\", rowSize);\n      elScreen.attr(\"cols\", colSize);\n      const elScreenTemp = $(`.${elStr}.as400-screen-temp`);\n      elScreenTemp.attr(\"rows\", rowSize);\n      elScreenTemp.attr(\"cols\", colSize);\n      const elStyle = $(`.${elStr}.as400-style`);\n      elStyle.attr(\"rows\", rowSize);\n      elStyle.attr(\"cols\", colSize);\n      const elHighlight = $(`.${elStr}.as400-highlight`);\n      elHighlight.html(this.getHighlightDefault(rowSize, colSize));\n    };\n\n    this.setAs400Screen = (elStr, data) => {\n      const elScreen = $(`.${elStr}.as400-screen`);\n      elScreen.val(data);\n    };\n\n    this.setAs400Style = (elStr, text, styleParams) => {\n      const elStyle = $(`.${elStr}.as400-style`);\n      let style = styleParams; //   style = `..................................RRRRRRRRRRRRR.................................\\n\n      // ................................................................................\\n\n      // ................................................................................\\n\n      // ................................................................................\\n\n      // ................................................................................\\n\n      // .........................................................UUUUUUUUUU.............\\n\n      // .........................................................HHHHHHHHHH.............\\n\n      // .........................................................UUUUUUUUUU.............\\n\n      // .........................................................UUUUUUUUUU.............\\n\n      // .........................................................UUUUUUUUUU.............\\n\n      // ................................................................................\\n\n      // ................................................................................\\n\n      // ................................................................................\\n\n      // ................................................................................\\n\n      // ................................................................................\\n\n      // ................................................................................\\n\n      // ................................................................................\\n\n      // ................................................................................\\n\n      // ................................................................................\\n\n      // ................................................................................\\n\n      // ................................................................................\\n\n      // ................................................................................\\n\n      // ................................................................................\\n\n      // ................................................................................`;\n\n      console.log(\"styleParams: \", styleParams);\n      style = style.split(\"\\n\").join(\"\");\n      let textStyle = \"\";\n\n      for (let i = 0; i < text.length; i += 1) {\n        const character = text[i];\n        const styleCharacter = style[i];\n\n        if (styleCharacter !== \".\" && styleCharacter !== \"â†µ\") {\n          console.log(\"styleCharacter: \", styleCharacter);\n          textStyle += character.replace(character, `<as400-${styleCharacter.toLowerCase()}-style>$&</as400-${styleCharacter.toLowerCase()}-style>`);\n        } else {\n          textStyle += character;\n        }\n      }\n\n      $(elStyle).html(textStyle);\n    };\n\n    this.clearHighlight = (elStr, markType) => {\n      const elHighlight = $(`.${elStr}.as400-highlight`);\n      let newHighlight = elHighlight.html();\n      newHighlight = newHighlight.replace(`<as400-${markType}>`, \"\").replace(`</as400-${markType}>`, \"\");\n      elHighlight.html(newHighlight);\n    };\n\n    this.getAS400Cursor = posStr => {\n      const posArr = posStr.split(\",\");\n      return {\n        row: parseInt(posArr[0]),\n        col: parseInt(posArr[1])\n      };\n    };\n\n    this.setAS400Cursor = (elStr, data) => {\n      const pos = this.getAS400Cursor(data);\n      const index = this.getIndexByRowCol(pos.row, pos.col);\n      this.setSelectionRange(elStr, index, index);\n    };\n\n    this.convertRowColNumber = posStr => {\n      const posArr = posStr.trim().split(\",\");\n      return {\n        row: posArr[0],\n        col: posArr[1]\n      };\n    };\n\n    this.getRowNumberByIndex = (elStr, index) => {\n      const elScreen = $(`.${elStr}.as400-screen`);\n      return elScreen.val().substr(0, index).split(\"\\n\").length - 1;\n    };\n\n    this.getColNumberByIndex = (elStr, index, colSize) => {\n      const row = this.getRowNumberByIndex(elStr, index);\n      const col = (index - row) % colSize;\n\n      if (index === colSize * (row + 1) + row) {\n        return colSize;\n      }\n\n      return col;\n    };\n\n    this.setIndexByRowCol = (elStr, row, col) => {\n      const index = this.getIndexByRowCol(row, col);\n      this.setSelectionRange(elStr, index, index);\n    };\n\n    this.getStartSelection = (elStr, colSize) => {\n      const elScreen = $(`.${elStr}.as400-screen`);\n      const startIndex = elScreen.prop(\"selectionStart\");\n      const rowSelectionStartIndex = this.getRowNumberByIndex(elStr, startIndex) + 1;\n      const colSelectionStartIndex = this.getColNumberByIndex(elStr, startIndex, colSize) + 1;\n      return {\n        row: rowSelectionStartIndex,\n        col: colSelectionStartIndex\n      };\n    };\n\n    this.getEndSelection = (elStr, colSize) => {\n      const elScreen = $(`.${elStr}.as400-screen`);\n      const endIndex = elScreen.prop(\"selectionEnd\");\n      const rowSelectionEndIndex = this.getRowNumberByIndex(elStr, endIndex) + 1;\n      const colSelectionEndIndex = this.getColNumberByIndex(elStr, endIndex, colSize) + 1;\n      return {\n        row: rowSelectionEndIndex,\n        col: colSelectionEndIndex\n      };\n    };\n\n    this.getSelectionRange = (elStr, selectionStart, selectionEnd) => {\n      const elScreen = $(`.${elStr}.as400-screen`);\n\n      if (selectionStart !== selectionEnd) {\n        // selectionStart -= 1;\n        const selection = elScreen.val().substring(selectionStart, selectionEnd);\n        return selection;\n      }\n\n      return \"\";\n    };\n\n    const id = props.id;\n    this.state = {\n      id: id\n    };\n  }\n\n  componentDidMount() {\n    const data = this.props.data;\n    const _data$screen = data.screen,\n          rows = _data$screen.rows,\n          cols = _data$screen.cols;\n    const text = data.Text;\n    const style = data.Style;\n    const cursor = data.Cursor;\n    this.initScreen(this.props.id, rows, cols);\n    this.setAs400Screen(this.props.id, text);\n    this.setAs400Style(this.props.id, text, style);\n    this.setAS400Cursor(this.props.id, cursor);\n  }\n\n  render() {\n    const id = this.props.id;\n    return React.createElement(\"div\", {\n      className: \"as400-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 244\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"screen\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 246\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: `${id} as400-highlight`,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 247\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: `${id} as400-style`,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 248\n      },\n      __self: this\n    }), React.createElement(\"textarea\", {\n      className: `${id} as400-screen`,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 249\n      },\n      __self: this\n    }), React.createElement(\"textarea\", {\n      className: `${id} as400-screen-temp`,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 250\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default Emulator;","map":{"version":3,"sources":["/Users/jutawuth/git/emulator/src/components/Emulator/index.jsx"],"names":["React","Component","$","Emulator","constructor","props","getHighlightDefault","rowSize","colSize","textHighlight","i","j","getIndexByRowCol","row","setSelectionRange","elStr","selectionStart","selectionEnd","elScreen","start","end","createTextRange","range","collapse","moveEnd","moveStart","select","initScreen","attr","elScreenTemp","elStyle","elHighlight","html","setAs400Screen","data","val","setAs400Style","text","styleParams","style","console","log","split","join","textStyle","length","character","styleCharacter","replace","toLowerCase","clearHighlight","markType","newHighlight","getAS400Cursor","posStr","posArr","parseInt","col","setAS400Cursor","pos","index","convertRowColNumber","trim","getRowNumberByIndex","substr","getColNumberByIndex","setIndexByRowCol","getStartSelection","startIndex","prop","rowSelectionStartIndex","colSelectionStartIndex","getEndSelection","endIndex","rowSelectionEndIndex","colSelectionEndIndex","getSelectionRange","selection","substring","id","state","componentDidMount","screen","rows","cols","Text","Style","cursor","Cursor","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,CAAP,MAAc,QAAd;AAEA,OAAO,qBAAP;;AAEA,MAAMC,QAAN,SAAuBF,SAAvB,CAAiC;AAC/BG,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;;AADiB,SAuBnBC,mBAvBmB,GAuBG,CAACC,OAAD,EAAUC,OAAV,KAAsB;AAC1C,UAAIC,aAAa,GAAG,EAApB;;AACA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,OAApB,EAA6BG,CAAC,IAAI,CAAlC,EAAqC;AACnC,aAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,OAApB,EAA6BG,CAAC,IAAI,CAAlC,EAAqC;AACnCF,UAAAA,aAAa,IAAI,GAAjB;AACD;;AACDA,QAAAA,aAAa,IAAI,IAAjB;AACD;;AACD,aAAOA,aAAP;AACD,KAhCkB;;AAAA,SAkCnBG,gBAlCmB,GAkCA,CAACC,GAAD,EAAML,OAAN,KAAkB,CAACK,GAAG,GAAG,CAAP,IAAY,EAAZ,GAAiBL,OAAjB,GAA2BK,GAA3B,GAAiC,CAlCnD;;AAAA,SAoCnBC,iBApCmB,GAoCC,CAACC,KAAD,EAAQC,cAAR,EAAwBC,YAAxB,KAAyC;AAC3D,YAAMC,QAAQ,GAAGhB,CAAC,CAAE,IAAGa,KAAM,eAAX,CAAD,CAA4B,CAA5B,CAAjB;AAEA,UAAII,KAAK,GAAGH,cAAZ;AACA,UAAII,GAAG,GAAGH,YAAV;AAEAE,MAAAA,KAAK,IAAI,CAAT;AACAC,MAAAA,GAAG,IAAI,CAAP,CAP2D,CAS3D;;AACA,UAAIF,QAAQ,CAACJ,iBAAb,EAAgC;AAC9BI,QAAAA,QAAQ,CAACJ,iBAAT,CAA2BK,KAA3B,EAAkCC,GAAlC;AACD,OAFD,MAEO,IAAIF,QAAQ,CAACG,eAAb,EAA8B;AACnC,cAAMC,KAAK,GAAGJ,QAAQ,CAACG,eAAT,EAAd;AACAC,QAAAA,KAAK,CAACC,QAAN,CAAe,IAAf;AACAD,QAAAA,KAAK,CAACE,OAAN,CAAc,WAAd,EAA2BJ,GAA3B;AACAE,QAAAA,KAAK,CAACG,SAAN,CAAgB,WAAhB,EAA6BN,KAA7B;AACAG,QAAAA,KAAK,CAACI,MAAN;AACD;AACF,KAvDkB;;AAAA,SAyDnBC,UAzDmB,GAyDN,CAACZ,KAAD,EAAQR,OAAR,EAAiBC,OAAjB,KAA6B;AACxC,YAAMU,QAAQ,GAAGhB,CAAC,CAAE,IAAGa,KAAM,eAAX,CAAlB;AACAG,MAAAA,QAAQ,CAACU,IAAT,CAAc,MAAd,EAAsBrB,OAAtB;AACAW,MAAAA,QAAQ,CAACU,IAAT,CAAc,MAAd,EAAsBpB,OAAtB;AAEA,YAAMqB,YAAY,GAAG3B,CAAC,CAAE,IAAGa,KAAM,oBAAX,CAAtB;AACAc,MAAAA,YAAY,CAACD,IAAb,CAAkB,MAAlB,EAA0BrB,OAA1B;AACAsB,MAAAA,YAAY,CAACD,IAAb,CAAkB,MAAlB,EAA0BpB,OAA1B;AAEA,YAAMsB,OAAO,GAAG5B,CAAC,CAAE,IAAGa,KAAM,cAAX,CAAjB;AACAe,MAAAA,OAAO,CAACF,IAAR,CAAa,MAAb,EAAqBrB,OAArB;AACAuB,MAAAA,OAAO,CAACF,IAAR,CAAa,MAAb,EAAqBpB,OAArB;AAEA,YAAMuB,WAAW,GAAG7B,CAAC,CAAE,IAAGa,KAAM,kBAAX,CAArB;AACAgB,MAAAA,WAAW,CAACC,IAAZ,CAAiB,KAAK1B,mBAAL,CAAyBC,OAAzB,EAAkCC,OAAlC,CAAjB;AACD,KAxEkB;;AAAA,SA0EnByB,cA1EmB,GA0EF,CAAClB,KAAD,EAAQmB,IAAR,KAAiB;AAChC,YAAMhB,QAAQ,GAAGhB,CAAC,CAAE,IAAGa,KAAM,eAAX,CAAlB;AACAG,MAAAA,QAAQ,CAACiB,GAAT,CAAaD,IAAb;AACD,KA7EkB;;AAAA,SA+EnBE,aA/EmB,GA+EH,CAACrB,KAAD,EAAQsB,IAAR,EAAcC,WAAd,KAA8B;AAC5C,YAAMR,OAAO,GAAG5B,CAAC,CAAE,IAAGa,KAAM,cAAX,CAAjB;AAEA,UAAIwB,KAAK,GAAGD,WAAZ,CAH4C,CAI5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAE,MAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BH,WAA7B;AAEAC,MAAAA,KAAK,GAAGA,KAAK,CAACG,KAAN,CAAY,IAAZ,EAAkBC,IAAlB,CAAuB,EAAvB,CAAR;AAEA,UAAIC,SAAS,GAAG,EAAhB;;AACA,WAAK,IAAIlC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG2B,IAAI,CAACQ,MAAzB,EAAiCnC,CAAC,IAAI,CAAtC,EAAyC;AACvC,cAAMoC,SAAS,GAAGT,IAAI,CAAC3B,CAAD,CAAtB;AACA,cAAMqC,cAAc,GAAGR,KAAK,CAAC7B,CAAD,CAA5B;;AAEA,YAAIqC,cAAc,KAAK,GAAnB,IAA0BA,cAAc,KAAK,GAAjD,EAAsD;AACpDP,UAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ,EAAgCM,cAAhC;AAEAH,UAAAA,SAAS,IAAIE,SAAS,CAACE,OAAV,CACXF,SADW,EAEV,UAASC,cAAc,CAACE,WAAf,EAA6B,oBAAmBF,cAAc,CAACE,WAAf,EAA6B,SAF5E,CAAb;AAID,SAPD,MAOO;AACLL,UAAAA,SAAS,IAAIE,SAAb;AACD;AACF;;AAED5C,MAAAA,CAAC,CAAC4B,OAAD,CAAD,CAAWE,IAAX,CAAgBY,SAAhB;AACD,KAlIkB;;AAAA,SAoInBM,cApImB,GAoIF,CAACnC,KAAD,EAAQoC,QAAR,KAAqB;AACpC,YAAMpB,WAAW,GAAG7B,CAAC,CAAE,IAAGa,KAAM,kBAAX,CAArB;AACA,UAAIqC,YAAY,GAAGrB,WAAW,CAACC,IAAZ,EAAnB;AAEAoB,MAAAA,YAAY,GAAGA,YAAY,CACxBJ,OADY,CACH,UAASG,QAAS,GADf,EACmB,EADnB,EAEZH,OAFY,CAEH,WAAUG,QAAS,GAFhB,EAEoB,EAFpB,CAAf;AAIApB,MAAAA,WAAW,CAACC,IAAZ,CAAiBoB,YAAjB;AACD,KA7IkB;;AAAA,SA+InBC,cA/ImB,GA+IFC,MAAM,IAAI;AACzB,YAAMC,MAAM,GAAGD,MAAM,CAACZ,KAAP,CAAa,GAAb,CAAf;AAEA,aAAO;AACL7B,QAAAA,GAAG,EAAE2C,QAAQ,CAACD,MAAM,CAAC,CAAD,CAAP,CADR;AAELE,QAAAA,GAAG,EAAED,QAAQ,CAACD,MAAM,CAAC,CAAD,CAAP;AAFR,OAAP;AAID,KAtJkB;;AAAA,SAwJnBG,cAxJmB,GAwJF,CAAC3C,KAAD,EAAQmB,IAAR,KAAiB;AAChC,YAAMyB,GAAG,GAAG,KAAKN,cAAL,CAAoBnB,IAApB,CAAZ;AAEA,YAAM0B,KAAK,GAAG,KAAKhD,gBAAL,CAAsB+C,GAAG,CAAC9C,GAA1B,EAA+B8C,GAAG,CAACF,GAAnC,CAAd;AAEA,WAAK3C,iBAAL,CAAuBC,KAAvB,EAA8B6C,KAA9B,EAAqCA,KAArC;AACD,KA9JkB;;AAAA,SAgKnBC,mBAhKmB,GAgKGP,MAAM,IAAI;AAC9B,YAAMC,MAAM,GAAGD,MAAM,CAACQ,IAAP,GAAcpB,KAAd,CAAoB,GAApB,CAAf;AACA,aAAO;AACL7B,QAAAA,GAAG,EAAE0C,MAAM,CAAC,CAAD,CADN;AAELE,QAAAA,GAAG,EAAEF,MAAM,CAAC,CAAD;AAFN,OAAP;AAID,KAtKkB;;AAAA,SAwKnBQ,mBAxKmB,GAwKG,CAAChD,KAAD,EAAQ6C,KAAR,KAAkB;AACtC,YAAM1C,QAAQ,GAAGhB,CAAC,CAAE,IAAGa,KAAM,eAAX,CAAlB;AACA,aACEG,QAAQ,CACLiB,GADH,GAEG6B,MAFH,CAEU,CAFV,EAEaJ,KAFb,EAGGlB,KAHH,CAGS,IAHT,EAGeG,MAHf,GAGwB,CAJ1B;AAMD,KAhLkB;;AAAA,SAkLnBoB,mBAlLmB,GAkLG,CAAClD,KAAD,EAAQ6C,KAAR,EAAepD,OAAf,KAA2B;AAC/C,YAAMK,GAAG,GAAG,KAAKkD,mBAAL,CAAyBhD,KAAzB,EAAgC6C,KAAhC,CAAZ;AACA,YAAMH,GAAG,GAAG,CAACG,KAAK,GAAG/C,GAAT,IAAgBL,OAA5B;;AAEA,UAAIoD,KAAK,KAAKpD,OAAO,IAAIK,GAAG,GAAG,CAAV,CAAP,GAAsBA,GAApC,EAAyC;AACvC,eAAOL,OAAP;AACD;;AACD,aAAOiD,GAAP;AACD,KA1LkB;;AAAA,SA4LnBS,gBA5LmB,GA4LA,CAACnD,KAAD,EAAQF,GAAR,EAAa4C,GAAb,KAAqB;AACtC,YAAMG,KAAK,GAAG,KAAKhD,gBAAL,CAAsBC,GAAtB,EAA2B4C,GAA3B,CAAd;AACA,WAAK3C,iBAAL,CAAuBC,KAAvB,EAA8B6C,KAA9B,EAAqCA,KAArC;AACD,KA/LkB;;AAAA,SAiMnBO,iBAjMmB,GAiMC,CAACpD,KAAD,EAAQP,OAAR,KAAoB;AACtC,YAAMU,QAAQ,GAAGhB,CAAC,CAAE,IAAGa,KAAM,eAAX,CAAlB;AACA,YAAMqD,UAAU,GAAGlD,QAAQ,CAACmD,IAAT,CAAc,gBAAd,CAAnB;AAEA,YAAMC,sBAAsB,GAC1B,KAAKP,mBAAL,CAAyBhD,KAAzB,EAAgCqD,UAAhC,IAA8C,CADhD;AAEA,YAAMG,sBAAsB,GAC1B,KAAKN,mBAAL,CAAyBlD,KAAzB,EAAgCqD,UAAhC,EAA4C5D,OAA5C,IAAuD,CADzD;AAGA,aAAO;AACLK,QAAAA,GAAG,EAAEyD,sBADA;AAELb,QAAAA,GAAG,EAAEc;AAFA,OAAP;AAID,KA9MkB;;AAAA,SAgNnBC,eAhNmB,GAgND,CAACzD,KAAD,EAAQP,OAAR,KAAoB;AACpC,YAAMU,QAAQ,GAAGhB,CAAC,CAAE,IAAGa,KAAM,eAAX,CAAlB;AACA,YAAM0D,QAAQ,GAAGvD,QAAQ,CAACmD,IAAT,CAAc,cAAd,CAAjB;AACA,YAAMK,oBAAoB,GAAG,KAAKX,mBAAL,CAAyBhD,KAAzB,EAAgC0D,QAAhC,IAA4C,CAAzE;AACA,YAAME,oBAAoB,GACxB,KAAKV,mBAAL,CAAyBlD,KAAzB,EAAgC0D,QAAhC,EAA0CjE,OAA1C,IAAqD,CADvD;AAGA,aAAO;AACLK,QAAAA,GAAG,EAAE6D,oBADA;AAELjB,QAAAA,GAAG,EAAEkB;AAFA,OAAP;AAID,KA3NkB;;AAAA,SA6NnBC,iBA7NmB,GA6NC,CAAC7D,KAAD,EAAQC,cAAR,EAAwBC,YAAxB,KAAyC;AAC3D,YAAMC,QAAQ,GAAGhB,CAAC,CAAE,IAAGa,KAAM,eAAX,CAAlB;;AAEA,UAAIC,cAAc,KAAKC,YAAvB,EAAqC;AACnC;AAEA,cAAM4D,SAAS,GAAG3D,QAAQ,CAACiB,GAAT,GAAe2C,SAAf,CAAyB9D,cAAzB,EAAyCC,YAAzC,CAAlB;AACA,eAAO4D,SAAP;AACD;;AACD,aAAO,EAAP;AACD,KAvOkB;;AAAA,UAGTE,EAHS,GAGF1E,KAHE,CAGT0E,EAHS;AAIjB,SAAKC,KAAL,GAAa;AACXD,MAAAA,EAAE,EAAEA;AADO,KAAb;AAGD;;AAEDE,EAAAA,iBAAiB,GAAG;AAClB,UAAM/C,IAAI,GAAG,KAAK7B,KAAL,CAAW6B,IAAxB;AADkB,yBAGKA,IAAI,CAACgD,MAHV;AAAA,UAGVC,IAHU,gBAGVA,IAHU;AAAA,UAGJC,IAHI,gBAGJA,IAHI;AAIlB,UAAM/C,IAAI,GAAGH,IAAI,CAACmD,IAAlB;AACA,UAAM9C,KAAK,GAAGL,IAAI,CAACoD,KAAnB;AACA,UAAMC,MAAM,GAAGrD,IAAI,CAACsD,MAApB;AAEA,SAAK7D,UAAL,CAAgB,KAAKtB,KAAL,CAAW0E,EAA3B,EAA+BI,IAA/B,EAAqCC,IAArC;AACA,SAAKnD,cAAL,CAAoB,KAAK5B,KAAL,CAAW0E,EAA/B,EAAmC1C,IAAnC;AACA,SAAKD,aAAL,CAAmB,KAAK/B,KAAL,CAAW0E,EAA9B,EAAkC1C,IAAlC,EAAwCE,KAAxC;AACA,SAAKmB,cAAL,CAAoB,KAAKrD,KAAL,CAAW0E,EAA/B,EAAmCQ,MAAnC;AACD;;AAoNDE,EAAAA,MAAM,GAAG;AAAA,UACCV,EADD,GACQ,KAAK1E,KADb,CACC0E,EADD;AAGP,WACE;AAAK,MAAA,SAAS,EAAC,iBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEE;AAAK,MAAA,SAAS,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAK,MAAA,SAAS,EAAG,GAAEA,EAAG,kBAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAEE;AAAK,MAAA,SAAS,EAAG,GAAEA,EAAG,cAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,EAGE;AAAU,MAAA,SAAS,EAAG,GAAEA,EAAG,eAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHF,EAIE;AAAU,MAAA,SAAS,EAAG,GAAEA,EAAG,oBAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJF,CAFF,CADF;AAYD;;AAzP8B;;AA2PjC,eAAe5E,QAAf","sourcesContent":["import React, { Component } from \"react\";\nimport $ from \"jquery\";\n\nimport \"../../css/style.css\";\n\nclass Emulator extends Component {\n  constructor(props) {\n    super(props);\n\n    const { id } = props;\n    this.state = {\n      id: id\n    };\n  }\n\n  componentDidMount() {\n    const data = this.props.data;\n\n    const { rows, cols } = data.screen;\n    const text = data.Text;\n    const style = data.Style;\n    const cursor = data.Cursor;\n\n    this.initScreen(this.props.id, rows, cols);\n    this.setAs400Screen(this.props.id, text);\n    this.setAs400Style(this.props.id, text, style);\n    this.setAS400Cursor(this.props.id, cursor);\n  }\n\n  getHighlightDefault = (rowSize, colSize) => {\n    let textHighlight = \"\";\n    for (let i = 0; i < rowSize; i += 1) {\n      for (let j = 0; j < colSize; j += 1) {\n        textHighlight += \".\";\n      }\n      textHighlight += \"\\n\";\n    }\n    return textHighlight;\n  };\n\n  getIndexByRowCol = (row, colSize) => (row - 1) * 80 + colSize + row - 2;\n\n  setSelectionRange = (elStr, selectionStart, selectionEnd) => {\n    const elScreen = $(`.${elStr}.as400-screen`)[0];\n\n    let start = selectionStart;\n    let end = selectionEnd;\n\n    start -= 1;\n    end -= 1;\n\n    // elScreen.focus();\n    if (elScreen.setSelectionRange) {\n      elScreen.setSelectionRange(start, end);\n    } else if (elScreen.createTextRange) {\n      const range = elScreen.createTextRange();\n      range.collapse(true);\n      range.moveEnd(\"character\", end);\n      range.moveStart(\"character\", start);\n      range.select();\n    }\n  };\n\n  initScreen = (elStr, rowSize, colSize) => {\n    const elScreen = $(`.${elStr}.as400-screen`);\n    elScreen.attr(\"rows\", rowSize);\n    elScreen.attr(\"cols\", colSize);\n\n    const elScreenTemp = $(`.${elStr}.as400-screen-temp`);\n    elScreenTemp.attr(\"rows\", rowSize);\n    elScreenTemp.attr(\"cols\", colSize);\n\n    const elStyle = $(`.${elStr}.as400-style`);\n    elStyle.attr(\"rows\", rowSize);\n    elStyle.attr(\"cols\", colSize);\n\n    const elHighlight = $(`.${elStr}.as400-highlight`);\n    elHighlight.html(this.getHighlightDefault(rowSize, colSize));\n  };\n\n  setAs400Screen = (elStr, data) => {\n    const elScreen = $(`.${elStr}.as400-screen`);\n    elScreen.val(data);\n  };\n\n  setAs400Style = (elStr, text, styleParams) => {\n    const elStyle = $(`.${elStr}.as400-style`);\n\n    let style = styleParams;\n    //   style = `..................................RRRRRRRRRRRRR.................................\\n\n    // ................................................................................\\n\n    // ................................................................................\\n\n    // ................................................................................\\n\n    // ................................................................................\\n\n    // .........................................................UUUUUUUUUU.............\\n\n    // .........................................................HHHHHHHHHH.............\\n\n    // .........................................................UUUUUUUUUU.............\\n\n    // .........................................................UUUUUUUUUU.............\\n\n    // .........................................................UUUUUUUUUU.............\\n\n    // ................................................................................\\n\n    // ................................................................................\\n\n    // ................................................................................\\n\n    // ................................................................................\\n\n    // ................................................................................\\n\n    // ................................................................................\\n\n    // ................................................................................\\n\n    // ................................................................................\\n\n    // ................................................................................\\n\n    // ................................................................................\\n\n    // ................................................................................\\n\n    // ................................................................................\\n\n    // ................................................................................\\n\n    // ................................................................................`;\n\n    console.log(\"styleParams: \", styleParams);\n\n    style = style.split(\"\\n\").join(\"\");\n\n    let textStyle = \"\";\n    for (let i = 0; i < text.length; i += 1) {\n      const character = text[i];\n      const styleCharacter = style[i];\n\n      if (styleCharacter !== \".\" && styleCharacter !== \"â†µ\") {\n        console.log(\"styleCharacter: \", styleCharacter);\n\n        textStyle += character.replace(\n          character,\n          `<as400-${styleCharacter.toLowerCase()}-style>$&</as400-${styleCharacter.toLowerCase()}-style>`\n        );\n      } else {\n        textStyle += character;\n      }\n    }\n\n    $(elStyle).html(textStyle);\n  };\n\n  clearHighlight = (elStr, markType) => {\n    const elHighlight = $(`.${elStr}.as400-highlight`);\n    let newHighlight = elHighlight.html();\n\n    newHighlight = newHighlight\n      .replace(`<as400-${markType}>`, \"\")\n      .replace(`</as400-${markType}>`, \"\");\n\n    elHighlight.html(newHighlight);\n  };\n\n  getAS400Cursor = posStr => {\n    const posArr = posStr.split(\",\");\n\n    return {\n      row: parseInt(posArr[0]),\n      col: parseInt(posArr[1])\n    };\n  };\n\n  setAS400Cursor = (elStr, data) => {\n    const pos = this.getAS400Cursor(data);\n\n    const index = this.getIndexByRowCol(pos.row, pos.col);\n\n    this.setSelectionRange(elStr, index, index);\n  };\n\n  convertRowColNumber = posStr => {\n    const posArr = posStr.trim().split(\",\");\n    return {\n      row: posArr[0],\n      col: posArr[1]\n    };\n  };\n\n  getRowNumberByIndex = (elStr, index) => {\n    const elScreen = $(`.${elStr}.as400-screen`);\n    return (\n      elScreen\n        .val()\n        .substr(0, index)\n        .split(\"\\n\").length - 1\n    );\n  };\n\n  getColNumberByIndex = (elStr, index, colSize) => {\n    const row = this.getRowNumberByIndex(elStr, index);\n    const col = (index - row) % colSize;\n\n    if (index === colSize * (row + 1) + row) {\n      return colSize;\n    }\n    return col;\n  };\n\n  setIndexByRowCol = (elStr, row, col) => {\n    const index = this.getIndexByRowCol(row, col);\n    this.setSelectionRange(elStr, index, index);\n  };\n\n  getStartSelection = (elStr, colSize) => {\n    const elScreen = $(`.${elStr}.as400-screen`);\n    const startIndex = elScreen.prop(\"selectionStart\");\n\n    const rowSelectionStartIndex =\n      this.getRowNumberByIndex(elStr, startIndex) + 1;\n    const colSelectionStartIndex =\n      this.getColNumberByIndex(elStr, startIndex, colSize) + 1;\n\n    return {\n      row: rowSelectionStartIndex,\n      col: colSelectionStartIndex\n    };\n  };\n\n  getEndSelection = (elStr, colSize) => {\n    const elScreen = $(`.${elStr}.as400-screen`);\n    const endIndex = elScreen.prop(\"selectionEnd\");\n    const rowSelectionEndIndex = this.getRowNumberByIndex(elStr, endIndex) + 1;\n    const colSelectionEndIndex =\n      this.getColNumberByIndex(elStr, endIndex, colSize) + 1;\n\n    return {\n      row: rowSelectionEndIndex,\n      col: colSelectionEndIndex\n    };\n  };\n\n  getSelectionRange = (elStr, selectionStart, selectionEnd) => {\n    const elScreen = $(`.${elStr}.as400-screen`);\n\n    if (selectionStart !== selectionEnd) {\n      // selectionStart -= 1;\n\n      const selection = elScreen.val().substring(selectionStart, selectionEnd);\n      return selection;\n    }\n    return \"\";\n  };\n\n  render() {\n    const { id } = this.props;\n\n    return (\n      <div className=\"as400-container\">\n        {/* <div className=\"as400-as400-area\"> */}\n        <div className=\"screen\">\n          <div className={`${id} as400-highlight`}></div>\n          <div className={`${id} as400-style`}></div>\n          <textarea className={`${id} as400-screen`}></textarea>\n          <textarea className={`${id} as400-screen-temp`}></textarea>\n        </div>\n        {/* </div> */}\n      </div>\n    );\n  }\n}\nexport default Emulator;\n"]},"metadata":{},"sourceType":"module"}