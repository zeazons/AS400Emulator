{"ast":null,"code":"var _jsxFileName = \"/Users/jutawuth/git/emulator/src/components/Emulator/index.jsx\";\nimport React, { Component } from \"react\";\nimport { initScreen, setAs400Screen, setAs400Style, setAS400Cursor } from \"./controler\";\nimport \"./css/style.css\";\nexport const EmulatorView = props => {\n  const id = props.id,\n        readOnly = props.readOnly;\n  return React.createElement(\"div\", {\n    className: \"as400-container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"screen\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: `${id} as400-highlight`,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: `${id} as400-style`,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17\n    },\n    __self: this\n  }), React.createElement(\"textarea\", {\n    readOnly: readOnly ? readOnly : false,\n    className: `${id} as400-screen`,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18\n    },\n    __self: this\n  }), React.createElement(\"textarea\", {\n    readOnly: readOnly ? readOnly : false,\n    className: `${id} as400-screen-temp`,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22\n    },\n    __self: this\n  })));\n};\n\nclass Emulator extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {};\n  }\n\n  componentDidMount() {\n    console.log(\"props: \", props);\n    const _props = props,\n          id = _props.id,\n          rows = _props.rows,\n          cols = _props.cols,\n          text = _props.text,\n          style = _props.style,\n          cursor = _props.cursor;\n    initScreen(id, rows, cols);\n    setAs400Screen(id, text);\n    setAs400Style(id, text, style);\n    setAS400Cursor(id, cursor);\n  }\n\n  render() {\n    const _this$props = this.props,\n          id = _this$props.id,\n          data = _this$props.data;\n    return React.createElement(EmulatorView, {\n      id: id,\n      data: data,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    });\n  }\n\n}\n\nexport default Emulator;","map":{"version":3,"sources":["/Users/jutawuth/git/emulator/src/components/Emulator/index.jsx"],"names":["React","Component","initScreen","setAs400Screen","setAs400Style","setAS400Cursor","EmulatorView","props","id","readOnly","Emulator","state","componentDidMount","console","log","rows","cols","text","style","cursor","render","data"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SACEC,UADF,EAEEC,cAFF,EAGEC,aAHF,EAIEC,cAJF,QAKO,aALP;AAOA,OAAO,iBAAP;AAEA,OAAO,MAAMC,YAAY,GAAGC,KAAK,IAAI;AAAA,QAC3BC,EAD2B,GACVD,KADU,CAC3BC,EAD2B;AAAA,QACvBC,QADuB,GACVF,KADU,CACvBE,QADuB;AAEnC,SACE;AAAK,IAAA,SAAS,EAAC,iBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAK,IAAA,SAAS,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAK,IAAA,SAAS,EAAG,GAAED,EAAG,kBAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE;AAAK,IAAA,SAAS,EAAG,GAAEA,EAAG,cAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,EAGE;AACE,IAAA,QAAQ,EAAEC,QAAQ,GAAGA,QAAH,GAAc,KADlC;AAEE,IAAA,SAAS,EAAG,GAAED,EAAG,eAFnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHF,EAOE;AACE,IAAA,QAAQ,EAAEC,QAAQ,GAAGA,QAAH,GAAc,KADlC;AAEE,IAAA,SAAS,EAAG,GAAED,EAAG,oBAFnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAPF,CADF,CADF;AAgBD,CAlBM;;AAoBP,MAAME,QAAN,SAAuBT,SAAvB,CAAiC;AAAA;AAAA;AAAA,SAC/BU,KAD+B,GACvB,EADuB;AAAA;;AAG/BC,EAAAA,iBAAiB,GAAG;AAClBC,IAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBP,KAAvB;AADkB,mBAG8BA,KAH9B;AAAA,UAGVC,EAHU,UAGVA,EAHU;AAAA,UAGNO,IAHM,UAGNA,IAHM;AAAA,UAGAC,IAHA,UAGAA,IAHA;AAAA,UAGMC,IAHN,UAGMA,IAHN;AAAA,UAGYC,KAHZ,UAGYA,KAHZ;AAAA,UAGmBC,MAHnB,UAGmBA,MAHnB;AAKlBjB,IAAAA,UAAU,CAACM,EAAD,EAAKO,IAAL,EAAWC,IAAX,CAAV;AACAb,IAAAA,cAAc,CAACK,EAAD,EAAKS,IAAL,CAAd;AACAb,IAAAA,aAAa,CAACI,EAAD,EAAKS,IAAL,EAAWC,KAAX,CAAb;AACAb,IAAAA,cAAc,CAACG,EAAD,EAAKW,MAAL,CAAd;AACD;;AAEDC,EAAAA,MAAM,GAAG;AAAA,wBACc,KAAKb,KADnB;AAAA,UACCC,EADD,eACCA,EADD;AAAA,UACKa,IADL,eACKA,IADL;AAEP,WAAO,oBAAC,YAAD;AAAc,MAAA,EAAE,EAAEb,EAAlB;AAAsB,MAAA,IAAI,EAAEa,IAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACD;;AAjB8B;;AAmBjC,eAAeX,QAAf","sourcesContent":["import React, { Component } from \"react\";\nimport {\n  initScreen,\n  setAs400Screen,\n  setAs400Style,\n  setAS400Cursor\n} from \"./controler\";\n\nimport \"./css/style.css\";\n\nexport const EmulatorView = props => {\n  const { id, readOnly } = props;\n  return (\n    <div className=\"as400-container\">\n      <div className=\"screen\">\n        <div className={`${id} as400-highlight`}></div>\n        <div className={`${id} as400-style`}></div>\n        <textarea\n          readOnly={readOnly ? readOnly : false}\n          className={`${id} as400-screen`}\n        ></textarea>\n        <textarea\n          readOnly={readOnly ? readOnly : false}\n          className={`${id} as400-screen-temp`}\n        ></textarea>\n      </div>\n    </div>\n  );\n};\n\nclass Emulator extends Component {\n  state = {};\n\n  componentDidMount() {\n    console.log(\"props: \", props);\n\n    const { id, rows, cols, text, style, cursor } = props;\n\n    initScreen(id, rows, cols);\n    setAs400Screen(id, text);\n    setAs400Style(id, text, style);\n    setAS400Cursor(id, cursor);\n  }\n\n  render() {\n    const { id, data } = this.props;\n    return <EmulatorView id={id} data={data} />;\n  }\n}\nexport default Emulator;\n"]},"metadata":{},"sourceType":"module"}