{"ast":null,"code":"var _jsxFileName = \"/Users/jutawuth/Git/SSQUARE/Component-AS400-React/src/components/ScreenMapping/index.jsx\";\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport $ from \"jquery\";\nimport Emulator from \"../Emulator/index\";\nimport EmulatorView from \"../Emulator/EmulatorView\";\nimport { getIndexByRowCol, getSelectionRange, setSelectionRange, getStartSelection, getEndSelection } from \"../Emulator/controler\";\nexport class ScreenMapping extends Emulator {\n  constructor(...args) {\n    super(...args);\n\n    this.onMouseUp = callbackFn => {\n      const id = this.state.id;\n      const elScreen = $(`.${id}.as400-screen`);\n      elScreen.mouseup(event => {\n        // console.log(`| ========== ${event.type} ========== | `);\n        callbackFn(event);\n        this.clearAllMarkChackString(id);\n      });\n    };\n\n    this.onKeyDown = () => {\n      const _this$state = this.state,\n            id = _this$state.id,\n            colSize = _this$state.colSize;\n      const elScreen = $(`.${id}.as400-screen`);\n      elScreen.keydown(event => {\n        // console.log(`| ========== ${event.type} ========== |`);\n        const startSelection = getStartSelection(id, colSize);\n        const endSelection = getEndSelection(id, colSize);\n        const flag = \"field\"; // const flag = 'list';\n\n        if (flag === \"list\") {\n          const selectionStart = getIndexByRowCol(startSelection.row, 0) + 1;\n          const selectionEnd = getIndexByRowCol(endSelection.row, colSize) + 2;\n          setSelectionRange(id, selectionStart, selectionEnd);\n        }\n      });\n    };\n\n    this.onDoubleClick = callbackFn => {\n      const id = this.state.id;\n      const elScreen = $(`.${id}.as400-screen`);\n      elScreen.dblclick(event => {\n        // console.log(`| ========== ${event.type} ========== |`);\n        callbackFn(event);\n      });\n    };\n\n    this.onSelect = () => {\n      const _this$state2 = this.state,\n            id = _this$state2.id,\n            colSize = _this$state2.colSize;\n      const elScreen = $(`.${id}.as400-screen`);\n      elScreen.select(event => {\n        // console.log(`| ========== ${event.type} ========== |`);\n        const start = event.target.selectionStart;\n        const end = event.target.selectionEnd;\n        const startPosition = getStartSelection(id, colSize);\n        this.setState({\n          lastSelection: {\n            text: getSelectionRange(id, start, end),\n            row: startPosition.row,\n            col: startPosition.col\n          }\n        });\n      });\n    };\n\n    this.getHighlight = markType => {\n      return this.state.markList[markType.replace(\"-\", \"\")];\n    };\n\n    this.setHighlight = (markType, highlight) => {\n      this.markStringChackString(markType, highlight);\n    };\n\n    this.clearHighlight = markType => {\n      return this.clearMarkString(markType);\n    };\n\n    this.getHighlightList = () => {\n      return this.state.markList;\n    };\n\n    this.setHighlightList = highlightList => {\n      this.markAllCheckString(highlightList);\n    };\n\n    this.clearHighlightList = () => {\n      this.clearAllMarkChackString(this.props.id);\n    };\n\n    this.getLastSelection = () => {\n      return this.state.lastSelection;\n    };\n  }\n\n  componentDidMount(...args) {\n    super.componentDidMount.apply(this, args);\n    this.markAllCheckString(this.props.highlight);\n    const _this$props = this.props,\n          onDoubleClick = _this$props.onDoubleClick,\n          onMouseUp = _this$props.onMouseUp;\n    this.onSelect();\n    this.onKeyDown();\n    this.onMouseUp(onMouseUp);\n    this.onDoubleClick(onDoubleClick);\n  }\n\n  render() {\n    const _this$props2 = this.props,\n          id = _this$props2.id,\n          readOnly = _this$props2.readOnly;\n    return React.createElement(EmulatorView, {\n      id: id,\n      readOnly: readOnly,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    });\n  } // Set default props\n\n\n}\nScreenMapping.defaultProps = {\n  highlight: {}\n};\nScreenMapping.propTypes = {\n  highlightList: PropTypes.object,\n  onDoubleClick: PropTypes.func,\n  onMouseUp: PropTypes.func\n};\nexport default ScreenMapping;","map":{"version":3,"sources":["/Users/jutawuth/Git/SSQUARE/Component-AS400-React/src/components/ScreenMapping/index.jsx"],"names":["React","PropTypes","$","Emulator","EmulatorView","getIndexByRowCol","getSelectionRange","setSelectionRange","getStartSelection","getEndSelection","ScreenMapping","onMouseUp","callbackFn","id","state","elScreen","mouseup","event","clearAllMarkChackString","onKeyDown","colSize","keydown","startSelection","endSelection","flag","selectionStart","row","selectionEnd","onDoubleClick","dblclick","onSelect","select","start","target","end","startPosition","setState","lastSelection","text","col","getHighlight","markType","markList","replace","setHighlight","highlight","markStringChackString","clearHighlight","clearMarkString","getHighlightList","setHighlightList","highlightList","markAllCheckString","clearHighlightList","props","getLastSelection","componentDidMount","args","apply","render","readOnly","defaultProps","propTypes","object","func"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport $ from \"jquery\";\n\nimport Emulator from \"../Emulator/index\";\nimport EmulatorView from \"../Emulator/EmulatorView\";\n\nimport {\n  getIndexByRowCol,\n  getSelectionRange,\n  setSelectionRange,\n  getStartSelection,\n  getEndSelection\n} from \"../Emulator/controler\";\n\nexport class ScreenMapping extends Emulator {\n  componentDidMount(...args) {\n    super.componentDidMount.apply(this, args);\n\n    this.markAllCheckString(this.props.highlight);\n\n    const { onDoubleClick, onMouseUp } = this.props;\n\n    this.onSelect();\n    this.onKeyDown();\n    this.onMouseUp(onMouseUp);\n    this.onDoubleClick(onDoubleClick);\n  }\n\n  onMouseUp = callbackFn => {\n    const { id } = this.state;\n    const elScreen = $(`.${id}.as400-screen`);\n\n    elScreen.mouseup(event => {\n      // console.log(`| ========== ${event.type} ========== | `);\n      callbackFn(event);\n      this.clearAllMarkChackString(id);\n    });\n  };\n\n  onKeyDown = () => {\n    const { id, colSize } = this.state;\n    const elScreen = $(`.${id}.as400-screen`);\n\n    elScreen.keydown(event => {\n      // console.log(`| ========== ${event.type} ========== |`);\n      const startSelection = getStartSelection(id, colSize);\n      const endSelection = getEndSelection(id, colSize);\n\n      const flag = \"field\";\n      // const flag = 'list';\n      if (flag === \"list\") {\n        const selectionStart = getIndexByRowCol(startSelection.row, 0) + 1;\n        const selectionEnd = getIndexByRowCol(endSelection.row, colSize) + 2;\n\n        setSelectionRange(id, selectionStart, selectionEnd);\n      }\n    });\n  };\n\n  onDoubleClick = callbackFn => {\n    const { id } = this.state;\n    const elScreen = $(`.${id}.as400-screen`);\n\n    elScreen.dblclick(event => {\n      // console.log(`| ========== ${event.type} ========== |`);\n      callbackFn(event);\n    });\n  };\n\n  onSelect = () => {\n    const { id, colSize } = this.state;\n    const elScreen = $(`.${id}.as400-screen`);\n\n    elScreen.select(event => {\n      // console.log(`| ========== ${event.type} ========== |`);\n      const start = event.target.selectionStart;\n      const end = event.target.selectionEnd;\n      const startPosition = getStartSelection(id, colSize);\n\n      this.setState({\n        lastSelection: {\n          text: getSelectionRange(id, start, end),\n          row: startPosition.row,\n          col: startPosition.col\n        }\n      });\n    });\n  };\n\n  /**\n   * ==================\n   *  provide function\n   * ==================\n   */\n  getHighlight = markType => {\n    return this.state.markList[markType.replace(\"-\", \"\")];\n  };\n\n  setHighlight = (markType, highlight) => {\n    this.markStringChackString(markType, highlight);\n  };\n\n  clearHighlight = markType => {\n    return this.clearMarkString(markType);\n  };\n\n  getHighlightList = () => {\n    return this.state.markList;\n  };\n\n  setHighlightList = highlightList => {\n    this.markAllCheckString(highlightList);\n  };\n\n  clearHighlightList = () => {\n    this.clearAllMarkChackString(this.props.id);\n  };\n\n  getLastSelection = () => {\n    return this.state.lastSelection;\n  };\n\n  render() {\n    const { id, readOnly } = this.props;\n    return <EmulatorView id={id} readOnly={readOnly} />;\n  }\n\n  // Set default props\n  static defaultProps = {\n    highlight: {}\n  };\n}\n\nScreenMapping.propTypes = {\n  highlightList: PropTypes.object,\n  onDoubleClick: PropTypes.func,\n  onMouseUp: PropTypes.func\n};\n\nexport default ScreenMapping;\n"]},"metadata":{},"sourceType":"module"}