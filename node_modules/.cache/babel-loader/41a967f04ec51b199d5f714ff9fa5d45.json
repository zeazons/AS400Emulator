{"ast":null,"code":"var _jsxFileName = \"/Users/jutawuth/git/emulator/src/components/Emulator/index.jsx\";\nimport React, { Component } from \"react\";\nimport { initScreen, setAs400Screen, setAs400Style, setAS400Cursor } from \"./controler\";\nimport \"./css/style.css\";\nexport const EmulatorView = props => {\n  const id = props.id,\n        readOnly = props.readOnly;\n  return React.createElement(\"div\", {\n    className: \"as400-container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"screen\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: `${id} as400-highlight`,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: `${id} as400-style`,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17\n    },\n    __self: this\n  }), React.createElement(\"textarea\", {\n    readOnly: readOnly ? readOnly : false,\n    className: `${id} as400-screen`,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18\n    },\n    __self: this\n  }), React.createElement(\"textarea\", {\n    readOnly: readOnly ? readOnly : false,\n    className: `${id} as400-screen-temp`,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22\n    },\n    __self: this\n  })));\n};\n\nclass Emulator extends Component {\n  componentDidMount(props) {\n    const id = props.id,\n          data = props.data;\n    const _data$screen = data.screen,\n          rows = _data$screen.rows,\n          cols = _data$screen.cols;\n    const text = data.Text,\n          style = data.Style,\n          cursor = data.Cursor;\n    initScreen(id, rows, cols);\n    setAs400Screen(id, text);\n    setAs400Style(id, text, style);\n    setAS400Cursor(id, cursor);\n  }\n\n  render() {\n    const _this$props = this.props,\n          id = _this$props.id,\n          data = _this$props.data;\n    return React.createElement(EmulatorView, {\n      id: id,\n      data: data,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45\n      },\n      __self: this\n    });\n  }\n\n}\n\nexport default Emulator;","map":{"version":3,"sources":["/Users/jutawuth/git/emulator/src/components/Emulator/index.jsx"],"names":["React","Component","initScreen","setAs400Screen","setAs400Style","setAS400Cursor","EmulatorView","props","id","readOnly","Emulator","componentDidMount","data","screen","rows","cols","text","Text","style","Style","cursor","Cursor","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SACEC,UADF,EAEEC,cAFF,EAGEC,aAHF,EAIEC,cAJF,QAKO,aALP;AAOA,OAAO,iBAAP;AAEA,OAAO,MAAMC,YAAY,GAAGC,KAAK,IAAI;AAAA,QAC3BC,EAD2B,GACVD,KADU,CAC3BC,EAD2B;AAAA,QACvBC,QADuB,GACVF,KADU,CACvBE,QADuB;AAEnC,SACE;AAAK,IAAA,SAAS,EAAC,iBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAK,IAAA,SAAS,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAK,IAAA,SAAS,EAAG,GAAED,EAAG,kBAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE;AAAK,IAAA,SAAS,EAAG,GAAEA,EAAG,cAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,EAGE;AACE,IAAA,QAAQ,EAAEC,QAAQ,GAAGA,QAAH,GAAc,KADlC;AAEE,IAAA,SAAS,EAAG,GAAED,EAAG,eAFnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHF,EAOE;AACE,IAAA,QAAQ,EAAEC,QAAQ,GAAGA,QAAH,GAAc,KADlC;AAEE,IAAA,SAAS,EAAG,GAAED,EAAG,oBAFnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAPF,CADF,CADF;AAgBD,CAlBM;;AAoBP,MAAME,QAAN,SAAuBT,SAAvB,CAAiC;AAC/BU,EAAAA,iBAAiB,CAACJ,KAAD,EAAQ;AAAA,UACfC,EADe,GACFD,KADE,CACfC,EADe;AAAA,UACXI,IADW,GACFL,KADE,CACXK,IADW;AAAA,yBAEAA,IAAI,CAACC,MAFL;AAAA,UAEfC,IAFe,gBAEfA,IAFe;AAAA,UAETC,IAFS,gBAETA,IAFS;AAAA,UAGTC,IAHS,GAG8BJ,IAH9B,CAGfK,IAHe;AAAA,UAGIC,KAHJ,GAG8BN,IAH9B,CAGHO,KAHG;AAAA,UAGmBC,MAHnB,GAG8BR,IAH9B,CAGWS,MAHX;AAKvBnB,IAAAA,UAAU,CAACM,EAAD,EAAKM,IAAL,EAAWC,IAAX,CAAV;AACAZ,IAAAA,cAAc,CAACK,EAAD,EAAKQ,IAAL,CAAd;AACAZ,IAAAA,aAAa,CAACI,EAAD,EAAKQ,IAAL,EAAWE,KAAX,CAAb;AACAb,IAAAA,cAAc,CAACG,EAAD,EAAKY,MAAL,CAAd;AACD;;AAEDE,EAAAA,MAAM,GAAG;AAAA,wBACc,KAAKf,KADnB;AAAA,UACCC,EADD,eACCA,EADD;AAAA,UACKI,IADL,eACKA,IADL;AAEP,WAAO,oBAAC,YAAD;AAAc,MAAA,EAAE,EAAEJ,EAAlB;AAAsB,MAAA,IAAI,EAAEI,IAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACD;;AAf8B;;AAiBjC,eAAeF,QAAf","sourcesContent":["import React, { Component } from \"react\";\nimport {\n  initScreen,\n  setAs400Screen,\n  setAs400Style,\n  setAS400Cursor\n} from \"./controler\";\n\nimport \"./css/style.css\";\n\nexport const EmulatorView = props => {\n  const { id, readOnly } = props;\n  return (\n    <div className=\"as400-container\">\n      <div className=\"screen\">\n        <div className={`${id} as400-highlight`}></div>\n        <div className={`${id} as400-style`}></div>\n        <textarea\n          readOnly={readOnly ? readOnly : false}\n          className={`${id} as400-screen`}\n        ></textarea>\n        <textarea\n          readOnly={readOnly ? readOnly : false}\n          className={`${id} as400-screen-temp`}\n        ></textarea>\n      </div>\n    </div>\n  );\n};\n\nclass Emulator extends Component {\n  componentDidMount(props) {\n    const { id, data } = props;\n    const { rows, cols } = data.screen;\n    const { Text: text, Style: style, Cursor: cursor } = data;\n\n    initScreen(id, rows, cols);\n    setAs400Screen(id, text);\n    setAs400Style(id, text, style);\n    setAS400Cursor(id, cursor);\n  }\n\n  render() {\n    const { id, data } = this.props;\n    return <EmulatorView id={id} data={data} />;\n  }\n}\nexport default Emulator;\n"]},"metadata":{},"sourceType":"module"}